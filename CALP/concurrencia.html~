<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Conceptos Avanzados en Lenguajes de Programación</title>
<meta name="author" content="(Concurrencia)"/>
<style type="text/css">
.underline { text-decoration: underline; }
</style>
<link rel="stylesheet" href="../reveal.js-master/css/reveal.css"/>

<link rel="stylesheet" href="../reveal.js-master/css/theme/solarized.css" id="theme"/>


<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
    if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '../reveal.js-master/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    }
</script>
</head>
<body>
<div class="reveal">
<div class="slides">
<section id="sec-title-slide" data-background="" data-background-size="" data-background-repeat="" data-background-transition=""><h1 class="title">Conceptos Avanzados en Lenguajes de Programación</h1><h2 class="author">Concurrencia</h2><h2 class="date">2016-10-17 lun 00:00</h2><p class="date">Created: 2017-10-03 mar 13:34</p>
</section>
<section id="table-of-contents">
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#/slide-org2f74fbb">Introducción</a>
<ul>
<li><a href="#/slide-orga3ed1ea">Introducción</a></li>
<li><a href="#/slide-org84301e7">Arquitecturas de Multiprocesador</a></li>
<li><a href="#/slide-org57d10bd">Categorías de Concurrencia</a></li>
<li><a href="#/slide-org77c36d2">Motivación para el estudio de la concurrencia</a></li>
</ul>
</li>
<li><a href="#/slide-orgd933897">Introducción a la concurrencia a nivel de Subprograma</a>
<ul>
<li><a href="#/slide-orge00a889">Introducción a la concurrencia a nivel de Subprograma</a></li>
<li><a href="#/slide-orgeb0f785">Dos categorías generales de tareas</a></li>
<li><a href="#/slide-org0e6cdeb">Sincronización de Tareas</a></li>
<li><a href="#/slide-org5ea177e">Clases de sincronización</a></li>
<li><a href="#/slide-org98a2647">Necesidad de Sincronización de Competición</a></li>
<li><a href="#/slide-org1f49595">Planificador</a></li>
<li><a href="#/slide-orgb1069fe">Estados de Ejecución de las Tareas</a></li>
<li><a href="#/slide-org6528b19">Estados de Ejecución de las Tareas</a></li>
<li><a href="#/slide-org8234541">Liveness y Deadlock</a></li>
<li><a href="#/slide-orgdd6744f">Métodos de proveer sincronización</a></li>
</ul>
</li>
<li><a href="#/slide-org95af828">Los semáforos</a>
<ul>
<li><a href="#/slide-org875224f">Los semáforos</a></li>
<li><a href="#/slide-org7eebe3d">Sincronización de Cooperación con semáforos</a></li>
<li><a href="#/slide-org9b94140">Sincronización de Cooperación con semáforos</a></li>
<li><a href="#/slide-org77dafb9">Sincronización de Cooperación con semáforos</a></li>
<li><a href="#/slide-orgec7e89f">Semaforo: operación <i>wait</i></a></li>
<li><a href="#/slide-org23cf12a">Semáforos: Operación <i>Release</i></a></li>
<li><a href="#/slide-org515aa79">Codigo Productor/Consumidor</a></li>
<li><a href="#/slide-orgaf8ff4a">Código Productor/Consumidor</a></li>
<li><a href="#/slide-orge4c0790">Sincronización de Competición con Semáforos</a></li>
<li><a href="#/slide-org848957e">Código Productor/Consumidor</a></li>
<li><a href="#/slide-orgeb1cbd4">Código Productor/Consumidor</a></li>
<li><a href="#/slide-org2734614">Evaluación de Semáforos</a></li>
</ul>
</li>
<li><a href="#/slide-org93241c0">monitores</a>
<ul>
<li><a href="#/slide-org3b47ae8">monitores</a></li>
<li><a href="#/slide-org4e35dc3">Sincronización de Competición</a></li>
<li><a href="#/slide-orgb9db792">Sincronización de Cooperación</a></li>
<li><a href="#/slide-orgdac2e73">Evaluación de Monitores</a></li>
</ul>
</li>
<li><a href="#/slide-org5c8a344">Pasaje de mensajes</a>
<ul>
<li><a href="#/slide-org94ae5ff">Pasaje de mensajes</a></li>
<li><a href="#/slide-orgb921702">Pasaje de mensajes <i>Rendezvous</i></a></li>
<li><a href="#/slide-orge7ffbe6">Soporte de <b>Ada</b> para concurrencia</a></li>
<li><a href="#/slide-org2cf60ad">Cuerpo de la Tarea</a></li>
<li><a href="#/slide-orgd54fd35">Ejemplo de Cuerpo de Tarea</a></li>
<li><a href="#/slide-orgc6bd91a">Semántica del pasaje de mensajes de <b>Ada</b></a></li>
<li><a href="#/slide-orgfce125a">Líneas de tiempo del <i>Rendevous</i></a></li>
<li><a href="#/slide-orgaa7b362">Servidor y actor</a></li>
<li><a href="#/slide-orgca5185a">Representación Gráfica del <i>Rendezvous</i></a></li>
<li><a href="#/slide-org1605a68">Ejemplo de tarea <i>Actor</i></a></li>
<li><a href="#/slide-orgfd92971">Múltiples puntos de entrada</a></li>
<li><a href="#/slide-orgcb53011">Una tarea con múltiples entradas</a></li>
<li><a href="#/slide-orgc48168e">Semántica de tareas con multiples clausulas select</a></li>
<li><a href="#/slide-orge33f7e7">Sincronización de Cooperación con Pasaje de Mensajes</a></li>
<li><a href="#/slide-org397074b">Semántica del <i>select</i> con cláusulas <i>accept</i> con guardas</a></li>
<li><a href="#/slide-orgb69fde4">Ejemplo de Tarea con clausulas <i>accept</i> con guardas</a></li>
<li><a href="#/slide-orgcca56b0">Ejemplo de Tarea con clausulas <i>accept</i> con guardas</a></li>
<li><a href="#/slide-org582e53d">Sincronización de Competición con Pasaje de Mensajes</a></li>
<li><a href="#/slide-org87c8134">Concurrencia en Ada 95</a></li>
<li><a href="#/slide-org1bd3af5">Objetos Protegidos de Ada 95</a></li>
<li><a href="#/slide-orgd2e3d8e">Evaluación de <b>Ada</b></a></li>
</ul>
</li>
</ul>
</div>
</nav>
</section>

<section>
<section id="slide-org2f74fbb">
<div class="slide-header"></div>
<h2 id="org2f74fbb">Introducción</h2>
<div class="outline-text-2" id="text-org2f74fbb">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orga3ed1ea">
<div class="slide-header"></div>
<h3 id="orga3ed1ea">Introducción</h3>
<ul>
<li>La concurrencia puede ocurrir en cuatro niveles:
<ul>
<li>instrucciónes de maquina</li>
<li>el de sentencias de lenguajes de alto nivel</li>
<li>unidad</li>
<li>programa</li>

</ul></li>
<li>En lenguajes de programación nos interesan a nivel sentencias del
lenguaje y unidades de programa.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org84301e7">
<div class="slide-header"></div>
<h3 id="org84301e7">Arquitecturas de Multiprocesador</h3>
<ul>
<li>Finales de los años 1950 - un procesador de propósito general y uno
o más procesadores de propósito especial para las operaciones de
entrada y salida</li>
<li>Principios de 1960 varios procesadores completos, para la
concurrencia a nivel de programa</li>
<li>A mediados de 1960 - múltiples procesadores parciales, que se
utilizan para la concurrencia a nivel de instrucción</li>
<li>Maquinas de Simple instrucción y Múltiples Datos (SIMD)</li>
<li>Maquinas de Multiple instrucciones y Múltiples Datos (MIMD)
<ul>
<li>procesadores independientes que se pueden sincronizar (a nivel de
concurrencia de unidad)</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org57d10bd">
<div class="slide-header"></div>
<h3 id="org57d10bd">Categorías de Concurrencia</h3>
<ul>
<li>Un <i>hilo de control</i> en un programa es la secuencia de los puntos
del programa alcanzados por el flujo de la ejecución del programa</li>
<li>Categorías de concurrencia:
<ul>
<li><i>concurrencia física</i> - procesadores independientes múltiples (múltiples hilos de control)</li>
<li><i>concurrencia lógica</i> - La apariencia de concurrencia física es
presentada por un procesador de tiempo compartido (software puede
ser diseñado como si hubieran múltiples hilos de control)</li>

</ul></li>
<li>Corrutinas (cuasi-concurrencia) tienen un único hilo de ejecución.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org77c36d2">
<div class="slide-header"></div>
<h3 id="org77c36d2">Motivación para el estudio de la concurrencia</h3>
<ul>
<li>Implica una forma diferente de diseño de software que puede ser muy
útil, muchas situaciones del mundo real contienen concurrencia</li>
<li>Computadoras con multiprocesadores de concurrencia física son ampliamente utilizados.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgd933897">
<div class="slide-header"></div>
<h2 id="orgd933897">Introducción a la concurrencia a nivel de Subprograma</h2>
<div class="outline-text-2" id="text-orgd933897">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orge00a889">
<div class="slide-header"></div>
<h3 id="orge00a889">Introducción a la concurrencia a nivel de Subprograma</h3>
<ul>
<li>Una tarea o proceso es una unidad de programa que puede estar en ejecución concurrente con otras unidades de programa</li>
<li>Tareas difieren de subprogramas comunes, en que:
<ul>
<li>Una tarea puede iniciarse de forma implícita</li>
<li>Cuando una unidad de programa inicia la ejecución de una tarea, no
necesariamente suspende su ejecución.</li>
<li>Cuando se ha completado la ejecución de una tarea, el control
puede no volver al llamador</li>
<li>Tareas por lo general trabajan en conjunto.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgeb0f785">
<div class="slide-header"></div>
<h3 id="orgeb0f785">Dos categorías generales de tareas</h3>
<ul>
<li><i>tareas pesadas</i> ejecutan en su propio espacio de direcciones y
tienen sus propias pilas de tiempo de ejecución.</li>
<li><i>tareas livianas</i> todas se ejecutan en el mismo espacio de
direcciones y usan la misma pila de tiempo de ejecución.</li>
<li>Una tarea es <i>disjunta</i> si no se comunica ni afecta a la ejecución
de cualquier otra tarea en el programa de ningún modo.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org0e6cdeb">
<div class="slide-header"></div>
<h3 id="org0e6cdeb">Sincronización de Tareas</h3>
<ul>
<li>Un mecanismo que controla el orden en que las tareas se ejecutan</li>
<li>Dos tipos de sincronización
<ul>
<li>sincronización de cooperación</li>
<li>sincronización de competencia</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org5ea177e">
<div class="slide-header"></div>
<h3 id="org5ea177e">Clases de sincronización</h3>
<ul>
<li><b>Cooperación:</b> La tarea A debe esperar a que la tarea B termine
alguna actividad específica antes de poder continuar su
ejecución, por ejemplo, el problema del productor-consumidor</li>
<li><b>Competencia:</b> dos o más tareas deben utilizar algún recurso que no
se pueden utilizar simultáneamente, por ejemplo, un contador
compartido
<ul>
<li>La competencia se suele realizar mediante el acceso mutuamente excluyente.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org98a2647">
<div class="slide-header"></div>
<h3 id="org98a2647">Necesidad de Sincronización de Competición</h3>

<figure>
<img src="competsincr.png" alt="competsincr.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org1f49595">
<div class="slide-header"></div>
<h3 id="org1f49595">Planificador</h3>
<ul>
<li>Proporcionar sincronización requiere un mecanismo para retrasar la
ejecución de tareas</li>
<li>el control de ejecución de tareas se mantiene mediante un programa
llamado <i>planificador</i> (scheduler), que asigna la ejecución de
tareas a los procesadores disponibles.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgb1069fe">
<div class="slide-header"></div>
<h3 id="orgb1069fe">Estados de Ejecución de las Tareas</h3>
<ul>
<li><b>Nueva</b> - creada, pero aún no se ha inicializada</li>
<li><b>Ejecutable</b> o <b>lista</b> - lista para funcionar, pero no se está ejecutando actualmente (sin procesador disponible)</li>
<li><b>Ejecutando</b></li>
<li><b>Bloqueada</b> - ha estado funcionando, pero ahora no puede continuar (por lo general a la espera de que se produzca algún evento)</li>
<li><b>Muerta</b> - no más activa en ningún sentido.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org6528b19">
<div class="slide-header"></div>
<h3 id="org6528b19">Estados de Ejecución de las Tareas</h3>

<figure>
<img src="estadostareas.png" alt="estadostareas.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org8234541">
<div class="slide-header"></div>
<h3 id="org8234541">Liveness y Deadlock</h3>
<ul>
<li><i>Liveness</i> es una característica que una unidad de programa puede o
puede  no tener</li>
<li>En código secuencial, significa que la unidad finalmente completará su ejecución.</li>
<li>En un entorno concurrente, una tarea puede perder fácilmente su <i>liveness</i></li>
<li>Si todas las tareas en un entorno concurrente pierden su <i>liveness</i>,
se denomina <i>deadlock</i></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgdd6744f">
<div class="slide-header"></div>
<h3 id="orgdd6744f">Métodos de proveer sincronización</h3>
<ul>
<li>Semáforos</li>
<li>Monitores</li>
<li>Pasaje de Mensajes</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org95af828">
<div class="slide-header"></div>
<h2 id="org95af828">Los semáforos</h2>
<div class="outline-text-2" id="text-org95af828">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org875224f">
<div class="slide-header"></div>
<h3 id="org875224f">Los semáforos</h3>
<ul>
<li>Dijkstra - 1965</li>
<li>Un semáforo es una estructura de datos que consta de un contador y una cola para almacenar descriptores de tareas.</li>
<li>Los semáforos se pueden utilizar para implementar guardas en el
código que accede a estructuras de datos compartidos</li>
<li>Los semáforos tienen sólo dos operaciones, esperar y liberar (originalmente llamado P y V por Dijkstra)</li>
<li>Los semáforos se pueden utilizar para proporcionar tanto
sincronización de competencia y de cooperación.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org7eebe3d">
<div class="slide-header"></div>
<h3 id="org7eebe3d">Sincronización de Cooperación con semáforos</h3>
<ul>
<li>Ejemplo: Un buffer compartido</li>
<li>El buffer se implementa como un Tipo de Dato Abstracto con las
operaciones <i>DEPOSIT</i> y <i>FETCH</i> como las únicas formas de acceder al
buffer.</li>
<li>Se usan dos semáforos de cooperación: <i>emptyspots</i> y <i>fullspots</i></li>
<li>Los contadores de semáforos se utilizan para almacenar el número de
espacios vacíos y espacios cargados en el buffer.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org9b94140">
<div class="slide-header"></div>
<h3 id="org9b94140">Sincronización de Cooperación con semáforos</h3>
<ul>
<li><i>DEPOSIT</i> debe comprobar primero <i>emptyspots</i> para ver si hay espacio en el buffer</li>
<li>Si hay espacio, el contador de <i>emptyspots</i> disminuye y el valor es insertado</li>
<li>Si no hay espacio, la tarea se almacena en la cola de <i>emptyspots</i></li>
<li>Cuando <i>DEPOSIT</i> termina,  debe incrementar el contador de <i>fullspots</i></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org77dafb9">
<div class="slide-header"></div>
<h3 id="org77dafb9">Sincronización de Cooperación con semáforos</h3>
<ul>
<li><i>FETCH</i> debe comprobar <i>fullspots</i> para ver si hay un valor.
<ul>
<li>Si hay un spot completo, el contador de <i>fullspots</i> se decrementa y se elimina el valor.</li>
<li>Si no hay valores en el buffer, la tarea debe ser colocado en la cola de <i>fullspots</i>.</li>
<li>cuando <i>FETCH</i> termina, incrementa el contador de <i>emptyspots</i>.</li>

</ul></li>
<li>Las operaciones de <i>FETCH</i> y <i>DEPOSIT</i> en los semáforos se llevan a
cabo a través de dos operaciones del semáforo llamadas <i>wait</i> y
<i>release</i>.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgec7e89f">
<div class="slide-header"></div>
<h3 id="orgec7e89f">Semaforo: operación <i>wait</i></h3>
<div class="org-src-container">

<pre  class="src src-pascal">wait(aSemaphore)
<span style="color: #40e0d0; font-weight: bold;">if</span> aSemaphore&#8217;s counter &gt; 0 <span style="color: #40e0d0; font-weight: bold;">then</span> 
   decrement aSemaphore&#8217;s counter
<span style="color: #40e0d0; font-weight: bold;">else</span> 
   put the caller <span style="color: #40e0d0; font-weight: bold;">in</span> aSemaphore&#8217;s queue
   attempt <span style="color: #40e0d0; font-weight: bold;">to</span> transfer control <span style="color: #40e0d0; font-weight: bold;">to</span> a ready task 
     -- <span style="color: #40e0d0; font-weight: bold;">if</span> the task ready queue is empty, 
     -- deadlock occurs 
<span style="color: #40e0d0; font-weight: bold;">end</span>
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org23cf12a">
<div class="slide-header"></div>
<h3 id="org23cf12a">Semáforos: Operación <i>Release</i></h3>
<div class="org-src-container">

<pre  class="src src-pascal">release(aSemaphore)
<span style="color: #40e0d0; font-weight: bold;">if</span> aSemaphore&#8217;s queue is empty <span style="color: #40e0d0; font-weight: bold;">then</span>
   increment aSemaphore&#8217;s counter
<span style="color: #40e0d0; font-weight: bold;">else</span>
   put the calling task <span style="color: #40e0d0; font-weight: bold;">in</span> the task ready queue
   transfer control <span style="color: #40e0d0; font-weight: bold;">to</span> a task from aSemaphore&#8217;s queue
<span style="color: #40e0d0; font-weight: bold;">end</span>
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org515aa79">
<div class="slide-header"></div>
<h3 id="org515aa79">Codigo Productor/Consumidor</h3>
<div class="org-src-container">

<pre  class="src src-ada">semaphore fullspots, emptyspots;
fullstops.count = <span style="color: #ff6347; font-weight: bold;">0</span>;
emptyspots.count = BUFLEN;
<span style="color: #40e0d0; font-weight: bold;">task</span> <span style="color: #1e90ff; font-weight: bold;">producer</span>;
        <span style="color: #40e0d0; font-weight: bold;">loop</span>
        <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">produce VALUE &#8211;-</span>
        wait (emptyspots); {wait <span style="color: #40e0d0; font-weight: bold;">for</span> space}
        DEPOSIT(VALUE);
        release(fullspots); {increase filled}
        <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
<span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">producer</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgaf8ff4a">
<div class="slide-header"></div>
<h3 id="orgaf8ff4a">Código Productor/Consumidor</h3>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task</span> <span style="color: #1e90ff; font-weight: bold;">consumer</span>;
        <span style="color: #40e0d0; font-weight: bold;">loop</span>
        wait (fullspots);{wait till <span style="color: #40e0d0; font-weight: bold;">not</span> empty}}
        FETCH(VALUE);
        release(emptyspots); {increase empty}
        <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">consume VALUE &#8211;-</span>
        <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
<span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">consumer</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orge4c0790">
<div class="slide-header"></div>
<h3 id="orge4c0790">Sincronización de Competición con Semáforos</h3>
<ul>
<li>Un tercer semáforo, llamado <i>acces</i>, se utiliza para controlar el
acceso (sincronización de competencia)
<ul>
<li>El contador de <i>acces</i> sólo tendrá los valores 0 y 1</li>
<li>Tal semáforo se llama un <i>semáforo binario</i></li>

</ul></li>
<li>Tener en cuenta que <i>wait</i> y <i>release</i> debe ser atómicos.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org848957e">
<div class="slide-header"></div>
<h3 id="org848957e">Código Productor/Consumidor</h3>
<div class="org-src-container">

<pre  class="src src-ada">semaphore <span style="color: #40e0d0; font-weight: bold;">access</span>, fullspots, emptyspots;
<span style="color: #40e0d0; font-weight: bold;">access</span>.count = <span style="color: #ff6347; font-weight: bold;">0</span>;
fullstops.count = <span style="color: #ff6347; font-weight: bold;">0</span>;
emptyspots.count = BUFLEN;
<span style="color: #40e0d0; font-weight: bold;">task</span> <span style="color: #1e90ff; font-weight: bold;">producer</span>;
        <span style="color: #40e0d0; font-weight: bold;">loop</span>
        <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">produce VALUE &#8211;-</span>
        wait(emptyspots); {wait <span style="color: #40e0d0; font-weight: bold;">for</span> space}
        wait(<span style="color: #40e0d0; font-weight: bold;">access</span>);     {wait <span style="color: #40e0d0; font-weight: bold;">for</span> <span style="color: #40e0d0; font-weight: bold;">access</span>)
        DEPOSIT(VALUE);
        release(<span style="color: #40e0d0; font-weight: bold;">access</span>); {relinquish <span style="color: #40e0d0; font-weight: bold;">access</span>}
        release(fullspots); {increase filled}
        <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
<span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">producer</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgeb1cbd4">
<div class="slide-header"></div>
<h3 id="orgeb1cbd4">Código Productor/Consumidor</h3>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task</span> <span style="color: #1e90ff; font-weight: bold;">consumer</span>;
        <span style="color: #40e0d0; font-weight: bold;">loop</span>
        wait(fullspots);{wait till <span style="color: #40e0d0; font-weight: bold;">not</span> empty}
        wait(<span style="color: #40e0d0; font-weight: bold;">access</span>);   {wait <span style="color: #40e0d0; font-weight: bold;">for</span> <span style="color: #40e0d0; font-weight: bold;">access</span>}
        FETCH(VALUE);
        release(<span style="color: #40e0d0; font-weight: bold;">access</span>); {relinquish <span style="color: #40e0d0; font-weight: bold;">access</span>}
        release(emptyspots); {increase empty}
        <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">consume VALUE &#8211;-</span>
        <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
<span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">consumer</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org2734614">
<div class="slide-header"></div>
<h3 id="org2734614">Evaluación de Semáforos</h3>
<ul>
<li>El mal uso de los semáforos puede provocar fallos en la
sincronización de la cooperación, por ejemplo, el buffer tendrá
overflow si el <i>wait</i> de <i>fullspots</i> falla.</li>
<li>El mal uso de los semáforos puede provocar fallos en la
sincronización de la competencia, por ejemplo, el programa entrara
en <i>Deadlock</i> si el <i>release</i> de <i>access</i> falla.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org93241c0">
<div class="slide-header"></div>
<h2 id="org93241c0">monitores</h2>
<div class="outline-text-2" id="text-org93241c0">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org3b47ae8">
<div class="slide-header"></div>
<h3 id="org3b47ae8">monitores</h3>
<ul>
<li><b>Pascal</b> concurrente, <b>Modula</b>, <b>Mesa</b>, <b>Ada</b>, <b>Java</b>, <b>C#</b></li>
<li>La idea: encapsular los datos compartidos y sus operaciones para restringir el acceso</li>
<li>Un monitor es un tipo abstracto de datos para los datos compartidos</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org4e35dc3">
<div class="slide-header"></div>
<h3 id="org4e35dc3">Sincronización de Competición</h3>
<ul>
<li>Los datos compartidos son residentes en el monitor (en lugar de en las unidades de cliente)</li>
<li>Todo acceso reside en el monitor
<ul>
<li>el monitor garantiza la sincronización al permitir un solo acceso a la vez</li>
<li>Las llamadas a procedimientos del monitor se ponen en cola de
forma implícita si el monitor está ocupado en el momento de la
llamada.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgb9db792">
<div class="slide-header"></div>
<h3 id="orgb9db792">Sincronización de Cooperación</h3>
<ul>
<li>Cooperación entre procesos es todavía una tarea de programación
<ul>
<li>El programador debe garantizar que un buffer compartido no
experimenta overflow o underflow</li>

</ul></li>

</ul>


<figure>
<img src="monitor.png" alt="monitor.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgdac2e73">
<div class="slide-header"></div>
<h3 id="orgdac2e73">Evaluación de Monitores</h3>
<ul>
<li>Es un mejor modo de proporcionar la sincronización de la competencia que los semáforos.</li>
<li>Los semáforos se pueden utilizar para implementar monitores</li>
<li>Los monitores pueden ser utilizados para implementar semáforos</li>
<li>Soporte para la sincronización de cooperación es muy similar al de
los semáforos, por lo que tiene los mismos problemas</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org5c8a344">
<div class="slide-header"></div>
<h2 id="org5c8a344">Pasaje de mensajes</h2>
<div class="outline-text-2" id="text-org5c8a344">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org94ae5ff">
<div class="slide-header"></div>
<h3 id="org94ae5ff">Pasaje de mensajes</h3>
<ul>
<li>El paso de mensajes es un modelo general para la concurrencia
<ul>
<li>Puede modelar tanto los semáforos como los monitores</li>
<li>No es sólo para la sincronización de la competencia</li>

</ul></li>
<li>Idea central: la comunicación de tareas es como ver a un médico, la
mayoría de las veces te espera o lo esperas, pero cuando tu y él
esten listo, te reunirás o tendras un <i>rendezvous</i></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgb921702">
<div class="slide-header"></div>
<h3 id="orgb921702">Pasaje de mensajes <i>Rendezvous</i></h3>
<ul>
<li>Un mecanismo para permitir que una tarea indique cuándo está
dispuesta a aceptar mensajes</li>
<li>Las tareas necesitan una manera de recordar quién está esperando que
su mensaje sea aceptado y alguna forma "justa" de elegir el
siguiente mensaje</li>
<li>Cuando el mensaje de una tarea remitente es aceptado por una
tarea receptora, la transmisión de mensaje real se denomina <i>rendezvous</i></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orge7ffbe6">
<div class="slide-header"></div>
<h3 id="orge7ffbe6">Soporte de <b>Ada</b> para concurrencia</h3>
<ul>
<li>El modelo de mensajes de Ada 83
<ul>
<li>Las tareas de Ada tienen parte de especificación y cuerpo como los
paquetes; La especificación tiene la interfaz, que es la
colección de puntos de entrada:</li>

</ul></li>

</ul>

<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task</span> <span style="color: #1e90ff; font-weight: bold;">Task_Example</span> <span style="color: #40e0d0; font-weight: bold;">is</span>
        <span style="color: #40e0d0; font-weight: bold;">entry</span> <span style="color: #1e90ff; font-weight: bold;">ENTRY_1</span> (Item : <span style="color: #40e0d0; font-weight: bold;">in</span> <span style="color: #9ac0cd;">Integer</span>);
<span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">Task_Example</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org2cf60ad">
<div class="slide-header"></div>
<h3 id="org2cf60ad">Cuerpo de la Tarea</h3>
<ul>
<li>El cuerpo de la tarea describe la acción que tiene lugar cuando se
produce un <i>rendezvous</i></li>
<li>Una tarea que envía un mensaje se suspende mientras espera que el
mensaje sea aceptado y durante el <i>rendezvous</i></li>
<li>Los puntos de entrada en la especificación se describen con
cláusulas de <i>accept</i> en el cuerpo:</li>

</ul>

<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">accept</span> <span style="color: #1e90ff; font-weight: bold;">entry_name</span> (formal parameters) <span style="color: #40e0d0; font-weight: bold;">do</span>
    ...
<span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">entry_name</span>
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgd54fd35">
<div class="slide-header"></div>
<h3 id="orgd54fd35">Ejemplo de Cuerpo de Tarea</h3>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task body</span> <span style="color: #1e90ff; font-weight: bold;">TASK_EXAMPLE</span> <span style="color: #40e0d0; font-weight: bold;">is</span>
     <span style="color: #40e0d0; font-weight: bold;">begin</span>
     <span style="color: #40e0d0; font-weight: bold;">loop</span>
     <span style="color: #40e0d0; font-weight: bold;">accept</span> <span style="color: #1e90ff; font-weight: bold;">ENTRY_1</span> (ITEM: <span style="color: #40e0d0; font-weight: bold;">in</span> <span style="color: #9ac0cd;">FLOAT</span>) <span style="color: #40e0d0; font-weight: bold;">do</span>
     ...
     <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">ENTRY_1</span>;
     <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
   <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">TASK_EXAMPLE</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgc6bd91a">
<div class="slide-header"></div>
<h3 id="orgc6bd91a">Semántica del pasaje de mensajes de <b>Ada</b></h3>
<ul>
<li>La tarea se ejecuta hasta la parte superior de la cláusula <i>accept</i> y
espera un mensaje</li>
<li>Durante la ejecución de la cláusula <i>accept</i>, el remitente suspende
su ejecución</li>
<li>Los parámetors del <i>accept</i> pueden transmitir información en una o
ambas direcciones</li>
<li>Cada cláusula <i>accept</i> tiene una cola asociada para almacenar
mensajes en espera.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgfce125a">
<div class="slide-header"></div>
<h3 id="orgfce125a">Líneas de tiempo del <i>Rendevous</i></h3>

<figure>
<img src="rendevous.png" alt="rendevous.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgaa7b362">
<div class="slide-header"></div>
<h3 id="orgaa7b362">Servidor y actor</h3>
<ul>
<li>Una tarea que tiene cláusulas <i>accept</i>, pero ningún otro código
se llama una tarea servidor</li>
<li>Una tarea sin cláusulas <i>accept</i> se denomina tarea actor
<ul>
<li>Una tarea de actor puede enviar mensajes a otras tareas</li>
<li>Nota: Un remitente debe conocer el nombre de entrada del receptor, pero no viceversa (asimétrico)</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgca5185a">
<div class="slide-header"></div>
<h3 id="orgca5185a">Representación Gráfica del <i>Rendezvous</i></h3>

<figure>
<img src="rendevous2.png" alt="rendevous2.png"> 

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org1605a68">
<div class="slide-header"></div>
<h3 id="org1605a68">Ejemplo de tarea <i>Actor</i></h3>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task</span> <span style="color: #1e90ff; font-weight: bold;">WATER_MONITOR</span>; <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">specification</span>
<span style="color: #40e0d0; font-weight: bold;">task body</span> <span style="color: #1e90ff; font-weight: bold;">WATER_MONITOR</span> <span style="color: #40e0d0; font-weight: bold;">is</span> <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">body</span>
<span style="color: #40e0d0; font-weight: bold;">begin</span>
  <span style="color: #40e0d0; font-weight: bold;">loop</span>
  <span style="color: #40e0d0; font-weight: bold;">if</span> WATER_LEVEL &gt; MAX_LEVEL
    <span style="color: #40e0d0; font-weight: bold;">then</span> SOUND_ALARM;
  <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">if</span>;
  <span style="color: #40e0d0; font-weight: bold;">delay</span> <span style="color: #ff6347; font-weight: bold;">1.0</span>; <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">No further execution</span>
            <span style="color: #ee82ee;">-- </span><span style="color: #ee82ee;">for at least 1 second</span>
  <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
<span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">WATER_MONITOR</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgfd92971">
<div class="slide-header"></div>
<h3 id="orgfd92971">Múltiples puntos de entrada</h3>
<ul>
<li>Las tareas pueden tener más de un punto de entrada
<ul>
<li>La especificación de la tarea tiene una cláusula de entrada para
cada una.</li>
<li>El cuerpo de la tarea tiene una cláusula de <i>accept</i> para cada
cláusula de entrada, colocada en una cláusula de <i>select</i>, que
está en un bucle.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgcb53011">
<div class="slide-header"></div>
<h3 id="orgcb53011">Una tarea con múltiples entradas</h3>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task body</span> <span style="color: #1e90ff; font-weight: bold;">TASK_EXAMPLE</span> <span style="color: #40e0d0; font-weight: bold;">is</span>
      <span style="color: #40e0d0; font-weight: bold;">loop</span>
        <span style="color: #40e0d0; font-weight: bold;">select</span> 
          <span style="color: #40e0d0; font-weight: bold;">accept</span> <span style="color: #1e90ff; font-weight: bold;">ENTRY_1</span> (formal params) <span style="color: #40e0d0; font-weight: bold;">do</span>
          ...
          <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">ENTRY_1</span>;
          ...
        <span style="color: #40e0d0; font-weight: bold;">or</span>
          <span style="color: #40e0d0; font-weight: bold;">accept</span> <span style="color: #1e90ff; font-weight: bold;">ENTRY_2</span> (formal params) <span style="color: #40e0d0; font-weight: bold;">do</span>
          ...
          <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">ENTRY_2</span>;
          ...
        <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">select</span>;
      <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
    <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">TASK_EXAMPLE</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgc48168e">
<div class="slide-header"></div>
<h3 id="orgc48168e">Semántica de tareas con multiples clausulas select</h3>
<ul>
<li>Si exactamente una cola de entrada no esta vacía, elija un mensaje de ella</li>
<li>Si más de una cola de entrada no esta vacía, elije una, de forma no determinística, para aceptar un mensaje</li>
<li>Si todos están vacíos, espera</li>
<li>La construcción se llama a menudo una <i>espera selectiva</i></li>
<li>Cláusula <i>accept</i> extendida - código que sigue a la cláusula, pero antes de la siguiente cláusula
<ul>
<li>Ejecutado simultáneamente con la tarea remitente</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orge33f7e7">
<div class="slide-header"></div>
<h3 id="orge33f7e7">Sincronización de Cooperación con Pasaje de Mensajes</h3>
<ul>
<li>Provisto por cláusulas <i>accept</i> con guardas:</li>

</ul>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">when</span> <span style="color: #40e0d0; font-weight: bold;">not</span> FULL(BUFFER) =&gt;
    <span style="color: #40e0d0; font-weight: bold;">accept</span> <span style="color: #1e90ff; font-weight: bold;">DEPOSIT</span>(NEW_VALUE) <span style="color: #40e0d0; font-weight: bold;">do</span>
</pre>
</div>
<ul>
<li>Una cláusula <i>accept</i> con una cláusula <i>when</i> es abierta o cerrada
<ul>
<li>Una cláusula cuya guarda es verdadera se llama <i>abierta</i></li>
<li>una cláusula cuya guarda es falsa se llama <i>cerrada</i></li>
<li>una cláusula sin guarda es siempre abierta.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org397074b">
<div class="slide-header"></div>
<h3 id="org397074b">Semántica del <i>select</i> con cláusulas <i>accept</i> con guardas</h3>
<ul>
<li><i>select</i> primero verifica las guardas de todas las cláusulas</li>
<li>Si exactamente una está abierta, se comprueba la cola de mensajes</li>
<li>Si más de uno está abierto, no deterministicamente se elige una cola
entre ellas para comprobar los mensajes.</li>
<li>Si todos están cerrados, es un error de tiempo de ejecución</li>
<li>Una cláusula <i>select</i> puede incluir una cláusula <i>else</i> para evitar el error
<ul>
<li>Cuando se completa la cláusula <i>else</i>, el bucle se repite</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgb69fde4">
<div class="slide-header"></div>
<h3 id="orgb69fde4">Ejemplo de Tarea con clausulas <i>accept</i> con guardas</h3>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task</span> <span style="color: #1e90ff; font-weight: bold;">GAS_STATION_ATTENDANT</span> <span style="color: #40e0d0; font-weight: bold;">is</span>
        <span style="color: #40e0d0; font-weight: bold;">entry</span> <span style="color: #1e90ff; font-weight: bold;">SERVICE_ISLAND</span> (CAR : CAR_TYPE);
        <span style="color: #40e0d0; font-weight: bold;">entry</span> <span style="color: #1e90ff; font-weight: bold;">GARAGE</span> (CAR : CAR_TYPE);
        <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">GAS_STATION_ATTENDANT</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgcca56b0">
<div class="slide-header"></div>
<h3 id="orgcca56b0">Ejemplo de Tarea con clausulas <i>accept</i> con guardas</h3>
<div class="org-src-container">

<pre  class="src src-ada"><span style="color: #40e0d0; font-weight: bold;">task body</span> <span style="color: #1e90ff; font-weight: bold;">GAS_STATION_ATTENDANT</span> <span style="color: #40e0d0; font-weight: bold;">is</span>
  <span style="color: #40e0d0; font-weight: bold;">begin</span>
    <span style="color: #40e0d0; font-weight: bold;">loop</span>
      <span style="color: #40e0d0; font-weight: bold;">select</span>
        <span style="color: #40e0d0; font-weight: bold;">when</span> GAS_AVAILABLE =&gt;
                   <span style="color: #40e0d0; font-weight: bold;">accept</span> <span style="color: #1e90ff; font-weight: bold;">SERVICE_ISLAND</span> (CAR : CAR_TYPE) <span style="color: #40e0d0; font-weight: bold;">do</span>
                 FILL_WITH_GAS (CAR);
               <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">SERVICE_ISLAND</span>;
      <span style="color: #40e0d0; font-weight: bold;">or</span>
             <span style="color: #40e0d0; font-weight: bold;">when</span> GARAGE_AVAILABLE =&gt;
               <span style="color: #40e0d0; font-weight: bold;">accept</span> <span style="color: #1e90ff; font-weight: bold;">GARAGE</span> (CAR : CAR_TYPE) <span style="color: #40e0d0; font-weight: bold;">do</span>
                 FIX (CAR);
               <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">GARAGE</span>;
      <span style="color: #40e0d0; font-weight: bold;">else</span>
             SLEEP;
      <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">select</span>;
    <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #40e0d0; font-weight: bold;">loop</span>;
  <span style="color: #40e0d0; font-weight: bold;">end</span> <span style="color: #1e90ff; font-weight: bold;">GAS_STATION_ATTENDANT</span>;
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org582e53d">
<div class="slide-header"></div>
<h3 id="org582e53d">Sincronización de Competición con Pasaje de Mensajes</h3>
<ul>
<li>Modela el acceso mutuamente exclusivo a los datos compartidos</li>
<li>Ejemplo: un búfer compartido</li>
<li>Encapsula el búfer y sus operaciones en una tarea</li>
<li>La sincronización de la competencia está implícita en la semántica de las cláusulas <i>accept</i>
<ul>
<li>Sólo una cláusula <i>accept</i> en una tarea puede estar activa en un momento dado.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org87c8134">
<div class="slide-header"></div>
<h3 id="org87c8134">Concurrencia en Ada 95</h3>
<ul>
<li>Ada 95 incluye las características de Ada 83 para la concurrencia, además
de dos nuevas características:
<ul>
<li>Objetos protegidos: una forma más eficiente de implementar datos
compartidos para permitir el acceso a una estructura de datos
compartida que se puede hacer sin <i>rendezvous</i></li>
<li>Comunicación asincrónica</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org1bd3af5">
<div class="slide-header"></div>
<h3 id="org1bd3af5">Objetos Protegidos de Ada 95</h3>
<ul>
<li>Un objeto protegido es similar a un tipo de dato abstracto</li>
<li>El acceso a un objeto protegido es a través de mensajes pasados a
las entradas, como con una tarea, o a través de subprogramas protegidos</li>
<li>Un procedimiento protegido proporciona acceso de lectura y escritura mutuamente exclusivo a objetos protegidos</li>
<li>Una función protegida proporciona acceso concurrente de sólo lectura
a objetos protegidos.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgd2e3d8e">
<div class="slide-header"></div>
<h3 id="orgd2e3d8e">Evaluación de <b>Ada</b></h3>
<ul>
<li>El modelo de concurrencia de pasaje de mensajes es potente y general.</li>
<li>Los objetos protegidos son una mejor manera de proporcionar datos compartidos sincronizados</li>
<li>En ausencia de procesadores distribuidos, la elección entre
monitores y tareas con el paso de mensajes es algo una cuestión de
gusto</li>
<li>Para sistemas distribuidos, el paso de mensajes es un mejor modelo para la concurrencia.</li>

</ul>
<div class="slide-footer"></div>
</section>
</section>
</div>
</div>
<script src="../reveal.js-master/lib/js/head.min.js"></script>
<script src="../reveal.js-master/js/reveal.js"></script>

<script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

controls: true,
progress: true,
history: false,
center: true,
slideNumber: 't',
rollingLinks: false,
keyboard: true,
overview: true,

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'cube', // default/cube/page/concave/zoom/linear/fade/none
transitionSpeed: 'default',
multiplex: {
    secret: '', // null if client
    id: '', // id, obtained from socket.io server
    url: '' // Location of socket.io server
},

// Optional libraries used to extend on reveal.js
dependencies: [
 { src: '../reveal.js-master/lib/js/classList.js', condition: function() { return !document.body.classList; } },
 { src: '../reveal.js-master/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: '../reveal.js-master/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: '../reveal.js-master/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
 { src: '../reveal.js-master/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }]
,});
</script>
</body>
</html>
