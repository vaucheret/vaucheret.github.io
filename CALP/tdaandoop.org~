#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil
#+OPTIONS: reveal_single_file:nil reveal_slide_number:t num:nil
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js-master
#+REVEAL_TRANS: cube
#+REVEAL_SPEED: default
#+REVEAL_THEME: solarized
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL: 2
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1><h2>%a</h2><h2>%e</h2><h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_INIT_SCRIPT:

#+TITLE: Conceptos Avanzados en Lenguajes de Programación
#+DATE:  <2016-11-14 lun>
#+AUTHOR: Tipo de Datos Abstractos y POO
#+EMAIL: Claudio Vaucheret / cv@fi.uncoma.edu.ar 

* El concepto de Abstracción
- Una abstracción es una vista o representación de una entidad que
  incluye sólo los atributos más significativos
- El concepto de abstracción es fundamental en la programación (y en
  toda la ciencia de la computación)
- Casi todos los lenguajes de programación admiten la abstracción de procesos con subprogramas
- Casi todos los lenguajes de programación diseñados desde 1980 soportan la abstracción de datos

* Introducción a la Abstracción del Dato
- Un /tipo de datos abstracto/ (TDA) es un tipo de datos definido por
  el usuario que cumple las dos condiciones siguientes:
  - La representación y las operaciones sobre los objetos del tipo se definen en una única unidad sintáctica
  - La representación de objetos del tipo está oculta a las unidades
    de programa que utilizan estos objetos, por lo que las únicas
    operaciones posibles son las proporcionadas en la definición del
    tipo

* Ventajas de la Abstracción
- Ventaja de la primera condición
  - Organización del programa, modificabilidad (todo lo relacionado
    con la estructura de datos está junto), y compilación separada
- Ventaja de la segunda condición
  - Fiabilidad - ocultando las representaciones de datos, el código de
    usuario no puede acceder directamente a objetos del tipo y asi
    depender de la representación, permitiendo que la representación
    se cambie sin afectar el código de usuario.

* Cuestiones de Diseño
- Una unidad sintáctica para definir un TDA
- Operaciones integradas
  - Asignación
  - Comparación
- Operaciones comunes
  - Iteradores
  - Accesores
  - Constructores
  - Destructores
- TDA parametrizados

* Ejemplo en *ADA*
- El constructor de encapsulación se denomina /package/
  - Especificación del /package/ (la interfaz)
  - Cuerpo del /package/ (implementación de las entidades nombradas en la especificación)
- Ocultamiento de la información
  - La representación de tipo aparece en una parte de la especificación llamada la parte /privada/
    - Una forrma más restringida con tipos privados /limitados/
  - Defina el TDA como un puntero y proporciona la definición de la
    estructura apuntada en el paquete del cuerpo

* Ejemplo en Ada
#+BEGIN_SRC ada
package Stack_Pack is
	type stack_type is limited private;
	max_size: constant := 100;
	function empty(stk: in stack_type) return Boolean;
	procedure push(stk: in out stack_type; elem:in Integer);
	procedure pop(stk: in out stack_type);
	function top(stk: in stack_type) return Integer;

	private  -- hidden from clients
	type list_type is array (1..max_size) of Integer;
	type stack_type is record
		list: list_type;
		topsub: Integer range 0..max_size) := 0;
	end record;
end Stack_Pack
#+END_SRC

* Ejemplo en *C++*
- Basado en el tipo /struct/ de *C* y en las clases de *Simula 67*
- La clase es el dispositivo de encapsulación
- Todas las /instancias/ de una  clase comparten una copia única de las funciones miembro
- Cada instancia de una clase tiene su propia copia de los miembros de
  datos de la clase
- Las instancias pueden ser estáticas, dinámicas de pila o dinámicas
  de /heap/

* Ejemplo en *C++*
- Ocultamiento de la Información
  - cláusula /Private/ para entidades ocultas
  - cláusula /Public/ para interface de entidades
  - cláusula /Protected/ para herencia

* Ejemplo en *C++*
- Constructores:
  - Funciones para inicializar los miembros de datos de las instancias (no crean los objetos)
  - También puede asignar almacenamiento si parte del objeto es /heap-dynamic/
  - Puede incluir parámetros para proporcionar la parametrización de los objetos
  - Implicitamente llamado cuando se crea una instancia
  - Se puede llamar explícitamente
  - El nombre es el mismo que el nombre de la clase

* Ejemplo en *C++* 
- Destructores:
  - Funciones de limpieza después de que que una instancia se
    destruye; Por lo general sólo para recuperar el almacenamiento del
    /Heap/
  - Implícitamente llamado cuando finaliza la vida útil del objeto
  - Se puede llamar explícitamente
  - El nombre es el nombre de la clase, precedido por un tilde (~)

* Ejemplo en *C++*
- Funciones o clases /friend/ - para proporcionar acceso a miembros
  privados a algunas unidades o funciones no relacionadas
  - necesaria en *C++* 

* Ejemplo en *C++*
#+BEGIN_SRC c++
class stack {
	private:
		int *stackPtr, maxLen, topPtr;
	public:
		stack() { // a constructor
			stackPtr = new int [100];
			maxLen = 99;
			topPtr = -1;
		};
		~stack () {delete [] stackPtr;};
		void push (int num) {…};
		void pop () {…};
		int top () {…};
		int empty () {…};
}
#+END_SRC

* Evaluación de *Ada* y *C++*
- El soporte de *C++* para TDAs es similar al poder expresivo de *Ada*
- Ambos proporcionan mecanismos efectivos para la encapsulación y la ocultación de la información
- Los paquetes de *Ada* son encapsulaciones más generales

* Ejemplo en *java*
- Similar a *C++*, excepto:
  - Todos los tipos definidos por el usuario son clases
  - Todos los objetos se asignan en la memoria /Heap/ y se accede a través de variables de referencia
  - Las entidades individuales de las clases tienen modificadores de control de acceso (privados o públicos), en lugar de cláusulas
  - *Java* tiene un segundo mecanismo de alcance, el alcance del
    paquete, que se puede utilizar en lugar de la clase /amiga/
    - Todas las entidades de todas las clases de un paquete que no
      tienen modificadores de control de acceso son visibles en todo
      el paquete.

* Ejemplo en *java*

#+BEGIN_SRC C++
class StackClass {
	private:
	  private int [] *stackRef;
	  private int [] maxLen, topIndex;
	  public StackClass() { // a constructor
			stackRef = new int [100];
			maxLen = 99;
			topPtr = -1;
		};
		public void push (int num) {...};
		public void pop () {...};
		public int top () {...};
		public boolean empty () {...};
}
#+END_SRC


* Tipo de Datos Abstracto Parametrizados
- Los TDAs parametrizados permiten diseñar un TDA que puede almacenar
  cualquier tipo de elemento.
- También conocido como clases genéricas
- *C++* y *Ada* proporcionan soporte para TDAs parametrizados.
- *Java 5.0* proporciona una forma restringida de TDAs parametrizados

* TDA parametrizado en *Ada*
- Paquete genérico de *Ada*
  - ejemplo hacer que el tipo /pila/ sea más flexible haciendo que el
    tipo del elemento y el tamaño de la pila sean genéricos.


#+BEGIN_SRC ada
generic
Max_size: Positive;
type Elem_Type is Private;
package Generic_Stack is 
…
function Top(Stk: in out StackType) return Elem_type;
…
end Generic_Stack;



Package Integer_Stack is new Generics_Stack(100,Integer);
Package Float_Stack is new Generics_Stack(100,Float);
#+END_SRC

* TDA parametrizado en *C++* 
- Las clases pueden ser algo genéricas escribiendo constructores
  parametrizados

#+BEGIN_SRC c++
template <class type>
	class stack {
	…
  	stack (int size) {
    	stk_ptr = new int [size]; 
    	max_len = size - 1;
   	 top = -1;
   	};
	 	…
     }

  	stack stk(100);
#+END_SRC

* Encapsulación 
- Los programas grandes tienen dos necesidades especiales:
  - Algún medio de organización, aparte de la simple división en subprogramas
  - Algún medio de compilación parcial (unidades de compilación que son más pequeñas que el programa completo)
- Solución obvia: agrupación de subprogramas que están lógicamente
  relacionados en una unidad que puede ser compilada por separado
  (unidades de compilación)
- Tal procedimiento se llaman encapsulación

* Encapsulación en *C*
- Los archivos que contengan uno o más subprogramas pueden ser compilados independientemente
- La interfaz se coloca en un archivo de encabezado (/header/)
- Problema: el enlazador no comprueba los tipos entre un encabezado y la implementación asociada
- especificación del preprocesador ~#include~

* Encapsulación en *C++*
- Similar a C
- Adición de funciones  /friend/ que tienen acceso a miembros privados de la clase /amiga/

* Paquetes de *Ada*
- La especificacipon de los paquetes de Ada pueden incluir cualquier número de declaraciones de datos y subprogramas
- Los paquetes Ada pueden ser compilados por separado
- Las especificaciones de un paquete y las partes del cuerpo pueden ser compiladas por separado

* Encapsulación de Nombres
- Los programas grandes definen muchos nombres globales; Necesitan una manera de dividirse en agrupaciones lógicas
- Un encapsulamiento de nombres utiliza para crear un nuevo ámbito para los nombres
  - /Namespaces/ en *C++*
    - Puede colocar cada biblioteca en su propio espacio de nombres y
      calificar nombres utilizados fuera del espacio de nombres

* Encapsulación de Nombres
- Paquetes de *Java*
  - Los paquetes pueden contener más de una definición de clase; Las clases en un paquete son /amigas parciales/
  - Los clientes de un paquete pueden usar un nombre completo o utilizar la declaración ~import~
- Paquetes de *Ada*
  - Los paquetes se definen en jerarquías que corresponden a jerarquías de archivos
  - La visibilidad desde una unidad de programa se obtiene con la
    cláusula ~with~

* Programación Orientada a Objetos
- Muchos lenguajes de programación orientada a objetos (POO)
  - Algunos soportan la programación orientada a procedimientos y datos (por ejemplo, Ada y C ++)
  - Algunos soportan programacion funcional (por ejemplo, CLOS)
  - Los lenguajes más recientes no soportan otros paradigmas pero usan sus estructuras imperativas (por ejemplo, Java y C #)
  - Algunos son lenguajes de POO puro (por ejemplo, Smalltalk)

* Programación Orientada a Objetos
- Tipos de datos abstractos
- Herencia
  - La herencia es el tema central en OOP y en los lenguajes que lo soportan
- Polimorfismo

* Herencia
- Los aumentos de la productividad pueden provenir de la reutilización
  del software
  - TDAs son difíciles de reutilizar
  - Todos los TDA son independientes y al mismo nivel
- La herencia permite que nuevas clases se definan en términos de las
  ya existentes, es decir, permitiéndoles heredar partes comunes
- La herencia aborda ambas de las preocupaciones anteriores -
  reutilizar TDA después de cambios menores y definir clases en una
  jerarquía

* Conceptos de la orientación a objetos
- Los TDA se llaman clases
- Las instancias de una clase se llaman objetos
- Una clase que hereda es una clase /derivada/ o una /subclase/
- La clase de la que hereda otra clase es una clase /padre/ o /superclase/
- Los subprogramas que definen operaciones sobre objetos se llaman /métodos/

* Conceptos de la orientación a objetos
- Las llamadas a los métodos se llaman /mensajes/
- Toda la colección de métodos de un objeto se llama su /protocolo de mensajes/ o /interfaz de mensajes/
- Los mensajes tienen dos partes: el nombre del método y el objeto de destino
- En el caso más simple, una clase hereda todas las entidades de su padre

* Conceptos de la orientación a objetos
- La herencia puede ser complicada por el control de acceso a las entidades encapsuladas
  - Una clase puede ocultar entidades a sus subclases
  - Una clase puede ocultar entidades a sus clientes
  - Una clase también puede ocultar entidades para sus clientes mientras permite que sus subclases los vean
- Además una clase puede modificar el método de heredar
  - El nuevo reemplaza al heredado
  - El método en el padre es sobrescrito.

* Conceptos de la orientación a objetos
- Hay dos tipos de variables en una clase:
  - Variables de clase
  - Variables de instancia
- Hay dos tipos de métodos en una clase:
  - Métodos de clase - acepta mensajes de una clase
  - Métodos de instancia - acepta mensajes de objetos
- Herencia simple versus múltiple
- Una desventaja de la herencia para la reutilización:
  - Crea interdependencias entre las clases que complican el
    mantenimiento

* Ligadura Dinámica
- Una /variable polimórfica/ puede ser definida en una clase que sea
  capaz de referenciar (o apuntar) objetos de la clase y objetos de
  cualquiera de sus descendientes
- Cuando una jerarquía de clases incluye clases que sustituyen métodos
  y dichos métodos se llaman a través de una variable polimórfica, el
  enlace al método correcto será dinámico
- Permite que el software se pueda extender más fácilmente durante el
  desarrollo y el mantenimiento

* Ligadura Dinámica
- Un /método virtual/ es aquel que no incluye una definición (sólo define un protocolo)
- Una /clase abstracta/ es aquella que incluye al menos un método virtual
- Una clase abstracta no puede ser instanciada. (interface)

* Cuestiones de Diseño para lenguajes de POO
- La Exclusividad de Objetos
- Subclases como subtipos
- Chequeo de Tipos y polimorfismo
- Herencia única y múltiple
- Asignación de memoria de objetos y desalojo de memoria
- Ligadura dinámica y estática
- Clases anidadas

* La Exclusividad de Objetos
- Todo es un objeto
  - Ventaja - elegancia y pureza
  - Desventaja - operaciones lentas en objetos simples
- Agregar objetos a un sistema de tipos completo
  - Ventaja - operaciones rápidas en objetos simples
  - Desventaja - resulta en un sistema de tipo confuso (dos tipos de entidades)
- Incluir un sistema de tipos del estilo imperativo para las primitivas, pero hacer todo lo demás objetos
  - Ventaja - operaciones rápidas en objetos simples y un sistema de tipos relativamente pequeño
  - Desventaja - todavía una cierta confusión debido a los dos sistemas del tipo

* Son las sublclases subtipos?
- ¿Existe una relación "is-a" entre un objeto de clase padre y un objeto de la subclase?
  - Si una clase derivada "is a" clase primaria, los objetos de la
    clase derivada deben comportarse de la misma forma que el objeto
    de clase padre
- Una clase derivada es un subtipo si tiene una relación /is-a/ con su clase padre
  - la subclase sólo puede agregar variables y métodos y reemplazar
    los métodos heredados en formas "compatibles"

* Chequeo de tipos y Polimorfismo
- El polimorfismo puede requerir la comprobación dinámica de los
  parámetros y el valor de retorno
  - La comprobación dinámica del tipo es costosa y retrasa la detección de errores
- Si la reescritura de metodos están restringidos a tener los mismos
  tipos de parámetro y tipo de retorno, la comprobación puede ser
  estática

* Herencia única y múltiple
- La herencia múltiple permite que una nueva clase herede de dos o más
  clases
- Desventajas de la herencia múltiple:
  - complejidad de implementación del Lenguaje (en parte debido a colisiones de nombres)
  - Ineficiencia potencial - la ligadura dinámica cuesta más con la herencia múltiple
- Ventaja:
  - A veces es extremadamente conveniente y valioso

* Asignación de memoria de objetos y desalojo de memoria
- ¿A dónde se alojan los objetos?
  - Si se comportan en línea con los TDA, se pueden asignar a cualquier lugar
    - Se asigna a la pila central
    - en el /heap/  (a través de /new/)
  - Si se utiliza sólo la memoria /heap/, las referencias pueden ser
    uniformes a través de un puntero o variable de referencia
    - Simplifica la asignación - la dereferencia puede ser implícita
  - Si se utiliza sólo la pila central, hay un problema con respecto a los subtipos
  - ¿La desasignación es explícita o implícita?

* Ligadura dinámica y estática
- ¿Debería ser dinámica toda la vinculación de mensajes a los métodos?
  - Si no, se pierde las ventajas de la vinculación dinámica
  - Si todos lo son, es ineficiente
- Permitir que el usuario especifique.

* Clases anidadas
- Si una nueva clase es necesitada por sólo una clase, no hay razón
  para definirla para que pueda ser vista por otras clases
  - ¿Se puede anidar la nueva clase dentro de la clase que la usa?
  - En algunos casos, la nueva clase está anidada dentro de un
    subprograma en lugar de directamente en otra clase
- Otras cuestiones:
  - Qué elementos de la clase deben ser visibles para la clase anidada
    y viceversa

* Soporte para orientación a objetos en *Smalltalk*
- Smalltalk es un lenguaje OOP puro.
- Todo es un objeto.
- Todos los objetos tienen memoria local.
- Todo el cálculo es a través de objetos que envían mensajes a objetos.
- No tiene ninguna de las apariencias de los lenguajes imperativos.
- Todas las objeciones se asignan desde el /heap/.
- Toda desasignación es implícita.

* Soporte para orientación a objetos en *Smalltalk*
- Chequeo de Tipos y polimorfismo
  - Toda la ligadura de mensajes a los métodos es dinámica
    - El proceso consiste en buscar el objeto al que se envía el
      mensaje para el método; Si no se encuentra, busca la superclase,
      etc., hasta la clase de sistema que no tiene superclase.
  - El único tipo de comprobación en Smalltalk es dinámico y el único
    tipo de error se produce cuando un mensaje se envía a un objeto
    que no tiene ningún método de coincidencia

* Soporte para orientación a objetos en *Smalltalk*
- Herencia
  - Una subclase *Smalltalk* hereda todo, las variables de instancia,
    métodos de instancia y métodos de clase, de su superclase.
  - Todas las subclases son subtipos (nada puede ocultarse)
  - Sin herencia múltiple

* Soporte para orientación a objetos en *Smalltalk*
- Evaluación de Smalltalk
  - La sintaxis del lenguaje es simple y regular
  - Buen ejemplo del poder proporcionado por un lenguaje pequeño
  - Lento en comparación con los lenguajes imperativos convencionales.
  - La ligadura dinámica permite que los errores de tipo no se detecten hasta que se ejecute
  - Mayor impacto: avance de la POO

* Soporte para orientación a objetos en *C++*
- Características generales:
  - Evolución de *SIMULA 67*
  - El lenguaje de POO más utilizado
  - Sistema de tipos mixto
  - Constructores y destructores
  - Elaborado controles de acceso a elementos de las clases

* Soporte para orientación a objetos en *C++*
- Herencia
  - Una clase no necesita ser la subclase de ninguna clase
  - El control de acceso para los miembros pueden ser:
    - Privado (visible sólo en la clase y las clases amigas) (no permite que las subclases sean subtipos)
    - Público (visible en subclases y clientes)
    - Protegido (visible en la clase y en las subclases, pero no en los clientes)

* Soporte para orientación a objetos en *C++*
- Además, el proceso de declarar una subclase puede ser con controles de
  acceso (privados o públicos), los cuales definen posibles cambios en
  el acceso por subclases
  - Derivación privada - los miembros públicos y protegidos heredados son privados en las subclases
  - Derivación pública Los miembros públicos y protegidos son también
    públicos y protegidos en las subclases

* Ejemplo de Herencia en *C++*
#+BEGIN_SRC c++
class base_class {
  private:
    int a;
    float x;
  protected:
    int b;
    float y;
  public:
    int c;
    float z;
};

class subclass_1 : public base_class { … };
//     In this one, b and y are protected and
//     c and z are public

class subclass_2 : private base_class { … };
//    In this one, b, y, c, and z are private,
//    and no derived class has access to any
//    member of base_class

#+END_SRC

* Reexportación en *C++*
- Un miembro que no es accesible en una subclase (debido a la
  derivación privada) se puede declarar visible allí usando el
  operador de resolución de alcance (::), por ejemplo,

#+BEGIN_SRC c++
class subclass_3 : private base_class {
        base_class :: c;
 	      …
}
#+END_SRC

* Reexportación
- Una motivación para usar la derivación privada:
  - Una clase proporciona miembros que deben ser visibles, por lo que
    se definen como miembros públicos; Una clase derivada agrega
    algunos nuevos miembros, pero no quiere que sus clientes vean a
    los miembros de la clase padre, aunque tuvieron que ser públicos
    en la definición de clase principal.

* Soporte de POO en *C++*
- Se admite la herencia múltiple
  - Si hay dos miembros heredados con el mismo nombre, ambos se pueden
    hacer referencia utilizando el operador de resolución de alcance.

* Soporte de POO en *C++*
- Ligadura dinámica
  - Un método puede ser definido como virtual, lo que significa que
    pueden ser llamados a través de variables polimórficas y enlazados
    dinámicamente a los mensajes
  - Una función virtual pura no tiene ninguna definición en absoluto
  - Una clase que tiene al menos una función virtual pura es una /clase abstracta/

* Soporte de POO en *C++*
- Evaluación
  - *C++* proporciona amplios controles de acceso (a diferencia de *Smalltalk*)
  - *C++* proporciona herencia múltiple
  - En *C++*, el programador debe decidir en tiempo de diseño qué
    métodos se enlazarán estáticamente y cuales deben enlazarse
    dinámicamente
    - ¡La ligadura estática es más rápida!
  - El chequeo de tipo de *Smalltalk* es dinámicp (flexible, pero lento)
  - Debido a la interpretación y vinculación dinámica, Smalltalk es ~ 10 veces más lento que *C++*

* Soporte de POO en *Java*
- Debido a su estrecha relación con *C++*, nos enfocamos en las diferencias de ese lenguaje
- Características generales
  - Todos los datos son objetos excepto los tipos primitivos
  - Todos los tipos primitivos tienen clases de contenedor que almacenan un valor de dato
  - Todos los objetos son heap-dinámicos, se referencian a través de variables de referencia, y la mayoría se asignan con ~new~
  - El método ~finalize~ se llama implícitamente cuando el recolector
    de basura está a punto de recuperar el almacenamiento ocupado por
    el objeto

* Soporte de POO en *Java*
- Herencia
  - Solo herencia simple es admitida, pero hay una categoría de clase
    abstracta que proporciona algunos de los beneficios de la herencia
    múltiple (~interface~)
  - Una ~interface~ puede incluir sólo declaraciones de método y
    constantes nombradas, por ejemplo,
#+BEGIN_SRC c++
public interface Comparable {
		     public int comparedTo (Object b);
	}
#+END_SRC
  - Los métodos pueden ser ~final~ (no se pueden sobreescribir)

* Soporte de POO en *Java*
- Ligadura dinámica
- En Java, todos los mensajes se enlazan dinámicamente a los métodos,
  a menos que el método sea ~final~ (es decir, no se puede
  sobreescribir, por lo que el enlazado dinámico no sirve para nada)
- La ligadura estática también se utiliza si los métodos son estáticos
  o privados, los cuales no permiten sobreescribir

* Soporte de POO en *Java*
- Evaluación
  - Las decisiones de diseño para admitir POO son similares a *C++*
  - No hay soporte para la programación procedural
  - No hay clases sin clase padre
  - El enlace dinámico se utiliza como forma "normal" de enlazar los
    métodos con sus definiciones
  - Utiliza ~interface~ para proporcionar una forma simple de soporte para herencia múltiple

