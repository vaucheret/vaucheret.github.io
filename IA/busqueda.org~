#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil
#+OPTIONS: reveal_single_file:nil reveal_slide_number:"c"
#+OPTIONS: reveal_title_slide:auto reveal_width:-1
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js-master
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL: 2
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_POSITION:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_INIT_SCRIPT:
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css

#+MACRO: color @@html:<font color="$1">$2</font>@@

#+TITLE: Inteligencia Artificial
#+DATE:  Búsqueda
#+AUTHOR: Claudio Vaucheret
#+EMAIL: cv@fi.uncoma.edu.ar



* Agente Solucionador de Problemas

** Agente Solucionador de Problemas

Un agente inteligente {{{color(red,orientado a la meta)}}} que resuelve los problemas
considerando {{{color(orange,secuencias de acciones)}}} que logren su meta.

** Agente Solucionador de Problemas
¿Qué tenemos en cuenta al definir esta clase de agentes?

 - La {{{color(red,Representación del Conocimiento)}}} es atómica, es decir cada estado del mundo es indivisible.
 - {{{color(red,Formulación de la Meta)}}}: la meta ayuda a organizar el comportamiento limitando las acciones que necesita considerar. 
 - {{{color(red,Acciones disponibles)}}} y los {{{color(red,efectos)}}} de estas acciones.
 - {{{color(red,Entorno)}}}: observable, discreto (número finito de acciones para elegir), conocido y determínistico(cada acción tiene un efecto único).
 - El razonamiento se reduce a la elección de una acción de acuerdo al efecto que tiene.

* Busqueda

** Resolución de Problemas: Búsqueda

El proceso de buscar una {{{color(blue,secuencia de acciones)}}} que alcance una meta se llama
{{{color(blue,Búsqueda)}}}.

*** Resolución de Problemas: Formulación

Un {{{color(red,problema)}}} puede ser definido a través de los siguientes componentes:
- {{{color(red,Estado Inicial)}}}: donde el agente comienza.
- {{{color(red,Acciones)}}}: descripción de las acciones posibles de
  las que dispone el agente. Dado un estado $s$,
  {{{color(colorgreen,ACTIONS(s))}}} devuelve las acciones que pueden
  ser ejecutadas desde $s$. Decimos que cada una de estas acciones son
  {{{color(red,aplicables)}}} a $s$.


*** Resolución de Problemas: Formulación
Un {{{color(red,problema)}}} puede ser definido a través de los siguientes componentes:
-  {{{color(red,Modelo de Transición y Estados Sucesores)}}}: una descripción de lo que cada acción hace.
La función result$(s,a)$ que devuelve el estado que resulta de hacer la
acción $a$  en el estado $s$ y representa el modelo de transición.

La función del estado sucesor de un estado se define como  successor$(x)$ y
devuelve un par $(a, s)$, donde $a$ es la acción aplicada a $x$ y $s$ es el estado que se obtiene de
aplicar $a$ a $x$.



*** Resolución de Problemas: Formulación

Un {{{color(red,problema)}}} puede ser definido a través de los siguientes componentes:
- {{{color(red,Test de Meta)}}}: determina si un estado es un estado meta.
-  {{{color(red,Función de Costo del Camino)}}}: asigna un costo numérico a cada camino. Notamos el costo de una acción $a$ aplicada al estado $s$ que lleva al estado $s^{\prime}$ como  $c(s,a,s^{\prime})$.

*** Resolución de Problemas: Espacio de Búsqueda

Con  el estado inicial, las acciones y la función del estado sucesor se define el {{{color(red,espacio de búsqueda)}}} de un problema.

#+ATTR_REVEAL: :frag t
El espacio de búsqueda forma un {{{color(red,grafo)}}} en donde los  {{{color(orange,nodos)}}} son los 
{{{color(orange,estados)}}} y los  {{{color(orange,arcos)}}} las  {{{color(orange,acciones)}}}
aplicables desde ese nodo.

#+ATTR_REVEAL: :frag t
Un {{{color(red,camino)}}} en un espacio de estados es una  {{{color(green,secuencia de estados)}}}
conectados por una secuencia de acciones.

** Función del Agente

#+BEGIN_SRC pascal
function Agente-Solucionador(percept) returns an action
static: sec, una secuencia de accion, inicialmente vacia
       state, descripcion del estado del mundo actual
       goal, una meta, inicialmente nula
       problem, una formulación del problema

if seq is empty then 
       goal <- Formulate-Goal(state)
       problem <- Formulate-Problem(state,goal)
       seq <- Search(problem) 
       if seq=failure then return a null action
action <- First(seq)
seq <- Rest(seq)
return action
#+END_SRC

** Ejemplo: Ir a Bucarest

#+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in )
- *Situación inicial* Nos encontramos en Rumania; exactamente en  Arad. El vuelo parte mañana desde Bucarest
- *Formular Objetivo*  Estar en Bucarest
- *Formular Problema*
  - /Estados/: varias ciudades
  - /Acciones/: conducir entre ciudades
- *Encontrar la Solución* Secuencia of ciudades, e.g., Arad, Sibiu, Fagaras, Bucarest   


*** Ejemplo (cont)

[[file:mapa.png]]

*** Formulación de un problema de estado simple

- Un problema se define por cinco items
  - *Estado Inicial* e.g. en Arad
  - *Acciones* e.g. ir de una ciudad a otra.
  - *Función Sucesor* $S(x) =$ conjunto de pares acción--estado  e.g $S(Arad) = \{\langle Arad\to Zerind, Zerind\rangle, \ldots \}$
  - *Test de meta* Puede ser explícito, e.g $x =$ ``en Bucarest'' o implícito, e.g. $NoDirt(x)$
  - *Costo del camino* (aditivo) e.g. suma de distancias, números de acciones ejecutadas, etc. $c(x,a,y)$ es el costo del paso, se asume $\geq 0$

*** Formulación de un problema de estado simple

 - *SOLUCIÓN* 

  Es una secuencia de acciones, que llevan desde el
  estado incial al estado meta.

** Seleccionando un espacio de estados

El mundo real es demasiado {{{color(red,complejo)}}}.

El espacio de estados debe ser /abstraído/ para la resolución de
problemas.

#+ATTR_REVEAL: :frag t
- Abstracción
  - Estado = conjunto de estados
  - Acción = combinación compleja de acciones reales  e.g, ``Arad $\to$ Zerind'' representa un conjunto complejo de posibles rutas, paradas de descanso, etc..
  - Solución = conjunto de caminos reales que son soluciones en el mundo real

#+ATTR_REVEAL: :frag t
¡¡Cada acción abstracta debe ser ``más fácil'' que el problema original!!
