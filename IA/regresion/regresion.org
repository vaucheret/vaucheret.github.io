#+REVEAL_INIT_OPTIONS:  transition:'cube' 
#+options: toc:1 num:nil

#+REVEAL_THEME: moon
#+REVEAL_HLEVEL: 2
#+reveal_root:  https://cdn.jsdelivr.net/npm/reveal.js
#+TITLE: Inteligencia Artificial
#+DATE:  Planificación: Regresión
#+AUTHOR: Germán Braun
#+EMAIL: german.braun@fi.uncoma.edu.ar


* Repaso
  
** ¿Qué vimos?
   #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
- Representación de las acciones: STRIPS, Situation Calculus, Event Calculus
- Problemas en la representación del Cambio: Frame, Ramification y Qualification
- Representación del tiempo
- Algoritmos Forward y basados en resolución
- Algoritmo STRIPS. Problemas con el algoritmo
- [[color:red][HOY]] Algoritmos de Planificación: Regresión 
 
* Mundo de Bloques

** Estado Inicial
    #+REVEAL_HTML: <div style="font-size: 70%;">
     #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
   - *[[color:green][Estado Inicial]]*
     #+BEGIN_QUOTE
      [[color:blue][libre(a), libre(c), sobre(b, mesa), sobre(a, mesa), sobre(c,b)]]
     #+END_QUOTE
   - *[[color:green][Estado Final]]*
     #+BEGIN_QUOTE
       [[color:blue][libre(a), sobre(b,c), sobre(a,b), sobre(c, mesa)]]
     #+END_QUOTE
   - *[[color:green][Acción MOVE(X,P1,P2): movemos el bloque X de la posición P1 a la posición P2]]*
     - [[color:green][Lista de Precondición:]] /[[color:blue][P2]]/ $\neq$ /[[color:blue][mesa - bloque(P2), libre(X), bloque(X), libre(P2), sobre(X,P1).]]/
     - [[color:green][Lista Add:]] /[[color:blue][libre(P1), sobre(X,P2)]]/.
     - [[color:green][Lista Del:]] /[[color:blue][libre(P2), sobre(X,P1)]]/.
 #+REVEAL_HTML: </div>       
       
* Planificadores

**   Problemas con los Planificadores
  #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
- Existen planificadores forward pero tienen problemas con el tamaño
  del espacio de búsqueda que generan.
- El planificador de STRIPS si bien toma una meta y ve que acciones la
  logra, es decir es un planificador backward, Este planificador tiene
  un problema que no es trivial: [[color:red][algunas acciones pueden deshacer metas ya alcanzadas]]

* Planificación por Regresión

** Regresión
   #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
- Este algoritmo reduce el factor de ramificación porque trabaja desde
  las metas hacia atrás, eligiendo solamente aquellas acciones que
  alcanzan alguna de las metas a lograr.
- Asimismo trata el problema de las submetas que están en relación, ya
  que no intenta resolver las metas por separado, sino que sigue la
  pista a todas las metas que tiene que lograr.

  
** Planificación por Regresión
    #+REVEAL_HTML: <div style="font-size: 70%;">
    - Podemos analizar el algoritmo en términos de un grafo de búsqueda.
    - Los nodos están etiquetados  con conjuntos de metas y los arcos corresponden a las acciones.
    - Un nodo etiquetado con el conjunto de metas G tiene un nodo vecino por cada acción A que logre una de las metas  en G.
    #+REVEAL_HTML: </div>
    #+BEGIN_SRC dot :file imagenes/grbus.png :cmdline -Kdot -Tpng
      digraph G  {
	G[label=G,color=blue shape=circle];
	P1[label=<P¹<SUB>G</SUB>>,color=blue shape=circle];
	P2[label=<P²<SUB>G</SUB>>,color=blue shape=circle];
	Pn[label=<Pⁿ<SUB>G</SUB>>,color=blue shape=circle];
	G -> P1[label="a₁",color=red];
	G -> P2[label="a₂",color=red];
	G -> Pn[label="aₙ",color=red] 
      }
    #+END_SRC

    #+RESULTS:
    [[file:imagenes/grbus.png]]

** Precondición más débil
   #+REVEAL_HTML: <div class="column" style="font-size: 70%; float:left; width: 80%">
- El vecino que corresponde  a la acción A es etiquetado como [[color:red][$G_A$]].
- $G_A$ tiene que ser verdadera [[color:red][inmediatamente antes]] de ejecutar la acción A.
- $G_A$  se llama [[color:red][precondición más débil]] para la acción A y la lista de metas G.
- [[color:red][$wp(A,GL,G_A)$]]  es verdadera si $G_A$ es la precondición más débil que ocurre inmediatamente  antes de la acción A de modo que cada elemento en la lista de metas GL sea verdadera después de la ejecucción de A.
- Es la más débil ya que cualquier otra precondición debe implicarla.
    #+REVEAL_HTML: </div>
    #+REVEAL_HTML: <div class="column" float:right; width: 20%">    
    #+begin_src dot :file imagenes/prec.png :cmdline -Kdot -Tpng
      digraph G  {
	GL[label="GL",color=blue shape=circle];
	GA[label=<G<SUB>A</SUB>>,color=blue shape=circle];
	GL -> GA[label="A",color=red]
      }
    #+END_SRC

    #+RESULTS:
    [[file:imagenes/prec.png]]

** Precondición más débil
   #+REVEAL_HTML: <div class="column" style="font-size: 70%; float:left; width: 80%">
 En STRIPS, [[color:red][$wp(A,GL,WP)$]] se define como sigue: 
- Es /[[color:red][falso]]/ si algún elemento de GL está en la lista de borrado de la
  acción A. En este caso es imposible para todo elemento en GL ser
  verdadero inmediatamente después de la acción A.
- De otro modo, el valor de WP es [[color:red][\[precondiciones(A)\cup \{G\in GL: G\not\in add\_list(A)\}\]​]] 
  donde precondiciones(A) es la lista de precondiciones de A y $add\_list(A)$  es el conjunto de condiciones que agrega la acción A.
    #+REVEAL_HTML: </div>
    #+REVEAL_HTML: <div class="column" style="float:right; width: 20%">    
    #+begin_src dot :file imagenes/prec2.png :cmdline -Kdot -Tpng
      digraph G  {
	GL[label="GL",color=blue shape=circle];
	GA[label=<G<SUB>A</SUB>>,color=blue shape=circle];
	GL -> GA[label="A",color=red]
      }
    #+END_SRC

    #+RESULTS:
    [[file:imagenes/prec2.png]]

** Precondición más débil
   - *[[color:green][Ejemplo sobre el mundo de bloques]]*
     #+REVEAL_HTML: <div style="font-size: 55%;">
     Encontremos la precondición más débil para 
     \[GL=\{sobre(b,c), sobre(a,b),libre(a),sobre(c,mesa)\}\]
     con la acción $move(a,mesa,b)$.
     #+REVEAL_HTML: </div>
   - *[[color:green][Acción $move(a,mesa,b)$]]*
     #+REVEAL_HTML: <div style="font-size: 55%;">
     - [[color:blue][Lista de Precondición]]: bloque(b), libre(a), bloque(a), libre(b), sobre(a,mesa).
     - [[color:blue][Lista Add]]: sobre(a,b)
     - [[color:blue][Lista Del]]: libre(b), sobre(a,mesa).
     #+REVEAL_HTML: </div>
   - ¿Es falso?
     #+REVEAL_HTML: <div style="font-size: 55%;">
     Debemos verificar que ningún elemento GL está en la lista de borrado
     de la acción A.
     #+REVEAL_HTML: </div>


** Precondición más débil
   - *[[color:green][Ejemplo sobre el mundo de bloques]]*
     #+REVEAL_HTML: <div style="font-size: 55%;">
     Encontremos la precondición más débil para 
     \[GL=\{sobre(b,c), sobre(a,b),libre(a),sobre(c,mesa)\}\]
     con la acción $move(a,mesa,b)$.
     #+REVEAL_HTML: </div>
   - *[[color:green][Acción $move(a,mesa,b)$]]*
     #+REVEAL_HTML: <div style="font-size: 55%;">
     - [[color:blue][Lista de Precondición]]: bloque(b), libre(a), bloque(a), libre(b), sobre(a,mesa).
     - [[color:blue][Lista Add]]: sobre(a,b)
     - [[color:blue][Lista Del]]: libre(b), sobre(a,mesa).
     #+REVEAL_HTML: </div>
   - [[color:red][$precondiciones(A)\cup \{G\in GL: G\not\in add\_list(A)\}$]]
   #+ATTR_REVEAL: :frag (fade-in-then-semi-out)     
     #+REVEAL_HTML: <div style="font-size: 55%;">
     $\{bloque(b), libre(a), bloque(a), libre(b), sobre(a,mesa)\}\cup \{sobre(b,c), libre(a),sobre(c,mesa)\}$
     #+REVEAL_HTML: </div>

** Precondición más débil
   - *[[color:green][Ejemplo sobre el mundo de bloques]]*
     #+REVEAL_HTML: <div style="font-size: 55%;">
     Encontremos la precondición más débil para 
     \[GL=\{sobre(b,c), sobre(a,b),libre(a),sobre(c,mesa)\}\]
     con la acción $move(b,c,a)$.
     #+REVEAL_HTML: </div>
   - *[[color:green][Acción $move(b,c,a)$]]*
     #+REVEAL_HTML: <div style="font-size: 55%;">
     - [[color:blue][Lista de Precondición]]: bloque(a), libre(b), bloque(b), libre(a), sobre(b,c).
     - [[color:blue][Lista Add]]: libre(c), sobre(b,a).
     - [[color:blue][Lista Del]]: libre(a), sobre(b,c).
     #+REVEAL_HTML: </div>
   - ¿Es falso?
     #+REVEAL_HTML: <div style="font-size: 55%;">
     Debemos verificar que ningún elemento GL está en la lista de borrado
     de la acción A.
     #+REVEAL_HTML: </div>

** Precondición más débil: Algoritmo
   El algoritmo que se presenta a continuación tiene algunas simplificaciones:
   - No tiene en cuenta las relaciones derivadas.
   - Pueden existir elementos repetidos en la precondición más débil.
     
** Precondición más débil: Algoritmo
   #+BEGIN_SRC prolog
         %  wp( A, GL, WP ) es verdadera si WP es la precondición
         % más débil que debe ser cierta inmediatamente antes de A,
         % de modo que A es posible y cada elemento de la lista de
         % metas GL es verdadera inmediatamente después de A.

         % Si no hay metas por cumplir, entonces la precondición más
         % débil es el conjunto de las precondiciones de la acción A.

         wp(A,[],P) :-
             preconditions(A,P).
         wp(A,[G|R],P1) :-
             wp(A,R,P0),
             regress(G,A,P0,P1).
   #+END_SRC

** Precondición más débil: Algoritmo
   #+BEGIN_SRC prolog
     % regress(G,A,P0,P1) es verdadera si P1 es una lista de
     % condiciones que extiende P0 para incluir las condiciones 
     % suficientes que deben valer inmediatamente antes de A
     % como para garantizar que G es verdadera inmediatamente
     % después de A.

     regress(G,A,P,P) :- achieves(A,G).

     % G es una meta que alcanzamos con la acción A.
     % G es una meta que pertenece a la lista Add de la acción A.

     achieves(Action,Goal) :- member(Goal,add_List(Action)).
   #+END_SRC

** Precondición más débil: Algoritmo
   #+BEGIN_SRC prolog
     % Si G no está entre las metas que se logran con la acción A
     % entonces debe permanecer entre las metas a resolver
     % más adelante.
     % Sin embargo, deberemos controlar que la acción A no la  
     % contenga entre las metas que deja de hacer cumplir 
     % (ie, las de la lista Delete).

     % No pertenece a la add list de la acción A, luego debe 
     % cumplirse desde antes de la acción A.

     regress(G,A,P,[G|P]) :-
         not_on_add_list(A,G),
         not_on_delete_list(A, G).
   #+END_SRC

   #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
   ¡ATENCIÓN! La  acción A no borra a G.
   #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
   [[color:cyan][Esto permite controlar que  NO se deshaga una meta ya lograda.]]

** Planificador por Regresión
   #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
   - Un problema de planificación se resuelve con un [[color:red][planificador por
     regresión]] dándole un conjunto de metas que deben ser [[color:red][verdaderas
     en el estado final]].
   - El problema fue resuelto cuando el conjunto de metas es verdadero
     en el [[color:red][estado inicial]].
   - Un planificador por regresión trabaja manteniendo un conjunto de
     metas a ser alcanzadas en un momento dado.

** Planificador por Regresión

  - *[[color:green][IDEA]]*
    #+REVEAL_HTML: <div style="font-size: 60%;">
    #+BEGIN_QUOTE
    El planificador elige una meta a resolver y luego elige una
acción, que será la última en ejecutarse y que alcanza la meta
seleccionada.

Calcula la precondición más débil que debe ocurrir antes de que la
acción se ejecute, de modo que el conjunto de metas sea verdadera
después de la acción.

Así [[color:red][regresamos]] desde las metas finales a través de las acciones.

Luego logramos un plan que resuelva el nuevo conjunto de metas y
continuamos hasta que las metas que alcanzamos son verdaderas en el
estado inicial.
     #+END_QUOTE
     #+REVEAL_HTML: </div>    

     
** Planificación por Regresión
      #+BEGIN_SRC prolog
        % solve(GL,W) es verdadero si todo elemento de la lista GL
        % es verdadero en el mundo W

        solve(GoalSet,Init) :-
            holdsall(GoalSet,Init).
        solve(GoalSet,do(Action,W)) :-
            consistent(GoalSet),
            choose_goal(Goal,Goalset),
            choose_action(Action,Goal),
            wp(Action,GoalSet,NewGoalSet),
            solve(NewGoalset,W).
      #+END_SRC

** Planificador por Regresión
   #+REVEAL_HTML: <div style="font-size: 70%;">
   Algunas consideraciones:
   #+ATTR_REVEAL: :frag (fade-in-then-semi-out)
   - El problema de decidir cuando un conjunto de metas [[color:red][no es
     consistente o no es alcanzable]] no es fácil de resolver desde las
     acciones y sus efectos. Por ejemplo, no deseamos entre nuestras
     metas que un objeto esté en dos posiciones. Esto requiere de
     conocimiento específico del dominio.
   - La [[color:red][detección de ciclos]] puede ser incorporada al planificador por
     regresión. Se dice que una meta $G_1$ es más simple que una meta
     $G_2$ si $G_1\subseteq G_2$. Si durante la búsqueda encontramos
     un nodo $N$, pero uno de sus ancestros $N^{\prime}$ es el mismo o
     más simple, podemos podar $N$. Recordar que el proceso es
     backward.
   - El plan que devuelve este planificador da un [[color:red][orden total sobre las acciones]]
      aún cuando no es necesario. Este orden total
     tiende a incrementar la complejidad del espacio de búsqueda.
     #+REVEAL_HTML: </div>    


   

** Mundo de Bloques: Ejemplo

#+REVEAL_HTML: <div class="column" style="float:left; width: 60%">    
[[file:imagenes/MundoBloquesInit.png]]

   Estado Inicial
#+REVEAL_HTML: </div>    
#+REVEAL_HTML: <div class="column" style="float:right; width: 40%">
[[file:imagenes/MundoBloquesFinal.png]]

   Estado Final 
#+REVEAL_HTML: </div>    

** Mundo de Bloques: Ejemplo
#+REVEAL_HTML: <div style="font-size: 70%;">
#+ATTR_REVEAL: :frag (fade-in-then-semi-out)
\[\{sobre(b,c), \color{red}{sobre(a,b)},libre(a),sobre(c,mesa),bloque(b),bloque(a),bloque(c)\}\]
#+ATTR_REVEAL: :frag (fade-in-then-semi-out)
\[move(a,mesa,b)\]
#+BEGIN_CENTER
#+ATTR_REVEAL: :frag (fade-in-then-semi-out)
\[\{bloque(b), libre(a), bloque(a), libre(b), sobre(a,mesa)\}\cup \]
$\{\color{red}{sobre(b,c)}, libre(a),sobre(c,mesa), bloque(c)\}$
#+END_CENTER
#+ATTR_REVEAL: :frag (fade-in-then-semi-out)
\[move(b,mesa,c)\]
#+BEGIN_CENTER
#+ATTR_REVEAL: :frag (fade-in-then-semi-out)
 \[\{bloque(c),bloque(b),libre(a),bloque(a),libre(b),sobre(a,mesa),\]
 $sobre(b, mesa),sobre(c,mesa), libre(c)\}$
#+END_CENTER
#+REVEAL_HTML: </div>    

* Bibliografía
  
** Referencia Bibliográfica

   
#+REVEAL_HTML: <div style="font-size: 80%;">

file:imagenes/book.png  D. Poole, A. Mackworth y R. Goebel
  Computational Intelligence: A Logical Approach.
  Capítulo 8
  1998

#+REVEAL_HTML: </div>
