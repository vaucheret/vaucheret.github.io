<!DOCTYPE html>
<html>
<head>
<title></title>
<!-- 2020-11-03 mar 20:06 -->
<meta  charset="utf-8" />
<meta  htto-equiv="X-UA-Compatible" content="chrome=1" />
<meta  name="generator" content="Org-mode with org-ioslide" />
<meta  name="author" content="Claudio Vaucheret" />


<!--<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">-->
<!--<meta name="viewport" content="width=device-width, initial-scale=1.0">-->
<!--This one seems to work all the time, but really small on ipad-->
<!--<meta name="viewport" content="initial-scale=0.4">-->
<meta name="apple-mobile-web-app-capable" content="yes" />
<link rel="stylesheet" media="all" href="theme/css/default.css" />
<link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="theme/css/phone.css" />
<link rel="stylesheet" media="all" href="theme/css/small-icon.css" />
<base target="_blank"> <!-- This amazingness opens all links in a new tab. -->
<script data-main="js/slides" src="js/require-1.0.8.min.js"></script>

   <script src="js/jquery-1.7.1.min.js" type="text/javascript"></script>

<script src="js/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML,local/local" type="text/javascript"></script>
</head>
<body style="opacity: 0">
<slides class="layout-widescreen">
<slide class="title-slide segue nobackground">
       <aside class="gdbar"><img src="images/fai.png"></aside>
       <!-- The content of this hgroup is replaced programmatically through the slide_config.json. -->
       <hgroup class="auto-fadein">
         <h1 data-config-title><!-- populated from slide_config.json --></h1>
         <h2 data-config-subtitle><!-- populated from slide_config.json --></h2>
         <p data-config-presenter><!-- populated from slide_config.json --></p>
       </hgroup>
    </slide>
  

<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class="yellow "><div id="outline-container-org35d4275" class="outline-2">
<h2 id="org35d4275">Introducción</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>analisis / sintesis de programas (Ciencias de la Computación)</li>

<li>Probar que un programa \(P\) tiene tal propiedad (analisis de programas)</li>

<li>Alternativamente: Derivar propiedades que tiene el programa \(P\)</li>

<li><p>
Dado Un programa \(P\), generar un programa \(P'\) que sea:
</p>

<ul>
<li>en algún sentido equivalente a P</li>

<li>funcione mejor que \(P\) con respecto a algún criterio</li>
</ul>
<p>
(analisis / sintesis de programas)
</p></li>

<li>Aproximación Estandard:
<ul>
<li>identificar que ocurre algún invariante y</li>
<li>especializar el programa para el caso particular</li>
</ul></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orged1c189" class="outline-2">
<h2 id="orged1c189">Analisis de Programas</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>Frecuente en compiladores aunque raramente tratados en modo formal:
<ul>
<li>"optimización de código"</li>
<li>"eliminación de codigo muerto"</li>
<li>"movimiento de código"</li>
<li>&#x2026;</li>
</ul></li>
<li>Interpretación Abstracta provee un marco formal para desarrollar
herramientas de análisis de programas</li>
<li>Fase de Análisis + fase de sintesis ≡ Interpretación Abstracta +
Transformación de Programas</li>
</ul>


</article>

</slide>



</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orga118947" class="outline-2">
<h2 id="orga118947">¿Qué es la Interpretación Abstracta?</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li><p>
Considere detectar que una rama no ocurre: 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="C">
int x,y,z; y:=read(file); x:= y * y;
if x &gt;= 0 then z := 1 else z:= 0
</pre>

</div>
<ul>
<li>Analisis Exhaustivo en el dominio estandard: no termina</li>
<li>Razonamiento humano de los programas - Usa abstracciones o
aproximaciones: signos, ordenes de magnitud, par/impar, &#x2026;</li>
<li>Idea Básica: usar representaciones <i>aproximadas</i> (generalmente
finitas) de los objetos computacionales para hacer tratable el
problema del analisis del flujo del programa</li>
</ul></li>
<li>Analisis Abstracto es la formalización de esta idea:
<ul>
<li>define una semantica no estandard que puede aproximar el
<i>significado</i> o <i>funcionamiento</i> del programa en un modo finito</li>
<li>las expresiones son computadas en un dominio (abstracto)
aproximado en lugar del dominio concreto.</li>
</ul></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orge608b27" class="outline-2">
<h2 id="orge608b27">Ejemplo: La regla de los signos</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>Consideremos el dominio \(D = Z\) (enteros)</li>
<li>y el operador de multiplicación: \(* : Z^2 \to Z\)</li>
<li>Definimos un <b>dominio abstracto</b>: \(D_\alpha = \{[-],[+]\}\)</li>
<li><p>
y la multiplicación abstracta \(*_\alpha : {D_\alpha}^2 \to D_\alpha\)
definido por: 
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">\(*_\alpha\)</th>
<th scope="col" class="left">\([-]\)</th>
<th scope="col" class="left">\([+]\)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\([-]\)</td>
<td class="left">\([+]\)</td>
<td class="left">\([-]\)</td>
</tr>

<tr>
<td class="left">\([+]\)</td>
<td class="left">\([-]\)</td>
<td class="left">\([+]\)</td>
</tr>
</tbody>
</table></li>
<li>Esto nos permite razonar, por ejemplo, que \(y=x^2=x*x\) nunca es
negativo</li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org27bcd7d" class="outline-3">
<h3 id="org27bcd7d">Algunas observaciones:</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>si tenemos \(z = x * y\) entonces:
si \(x,y \in Z\) son aproximados con \(x_\alpha, y_\alpha \in
    D_\alpha\) entonces \(z \in Z\) es aproximado con \(z_\alpha = x_\alpha * y_\alpha\)</li>
<li>Es importante formalizar esta noción de aproximación para poder
probar que un análisis es correcto</li>
<li>La computación aproximada es generalmente menos precisa pero mas rápida.</li>
</ul>


</article>

</slide>

</slide>





</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org0a85e9a" class="outline-2">
<h2 id="org0a85e9a">Ejemplo: La regla de los signos (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>De nuevo \(D = Z\) (enteros)</li>
<li>y el operador \(* : Z^2 \to Z\)</li>
<li>Definimos un <i>mas refinado</i> <b>dominio abstracto</b>: \(D'_\alpha = \{[-],[0],[+]\}\)</li>
<li><p>
y la multiplicación abstracta \(*_\alpha : {D'_\alpha}^2 \to D'_\alpha\)
definido por: 
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">\(*_\alpha\)</th>
<th scope="col" class="left">\([-]\)</th>
<th scope="col" class="left">\([0]\)</th>
<th scope="col" class="left">\([+]\)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\([-]\)</td>
<td class="left">\([+]\)</td>
<td class="left">\([0]\)</td>
<td class="left">\([-]\)</td>
</tr>

<tr>
<td class="left">\([0]\)</td>
<td class="left">\([0]\)</td>
<td class="left">\([0]\)</td>
<td class="left">\([0]\)</td>
</tr>

<tr>
<td class="left">\([+]\)</td>
<td class="left">\([-]\)</td>
<td class="left">\([0]\)</td>
<td class="left">\([+]\)</td>
</tr>
</tbody>
</table></li>
<li>Esto nos permite razonar, que \(z=y*(0*x)\) es cero</li>
</ul>


</article>
</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgcf6e32a" class="outline-3">
<h3 id="orgcf6e32a">Algunas observaciones:</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Hay un grado de libertad en definir operadores abstractos y
dominios diferentes</li>
<li>El requerimiento mínimo es que sea <b>seguro</b> o <b>correcto</b></li>
<li>Definiciones "seguras" diferentes llevan a clase de análisis diferentes</li>
</ul>


</article>

</slide>

</slide>



</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org87b7045" class="outline-2">
<h2 id="org87b7045">Ejemplo: La regla de los signos (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>De nuevo \(D = Z\) (enteros)</li>
<li>y el operador de <i>suma</i> \(+ : Z^2 \to Z\)</li>
<li>No podemos usar: \(D'_\alpha = \{[-],[0],[+]\}\) porque no sabríamos
como representar el resultado de \([+] +_\alpha [-]\) (i.e. la suma
abstracta no sería cerrada)</li>
<li>Un nuevo elemento "\(\top\)" (supremum) que es la aproximación para todo entero</li>
<li>Nuevo <b>dominio abstracto</b>: \(D''_\alpha = \{[-],[0],[+],\top\}\)</li>
</ul>


</article>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org889b279" class="outline-3">
<h3 id="org889b279">suma abstracta</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
\(+_\alpha : {D''_\alpha}^2 \to D''_\alpha\)
definido por: 
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">\(+_\alpha\)</th>
<th scope="col" class="left">\([-]\)</th>
<th scope="col" class="left">\([0]\)</th>
<th scope="col" class="left">\([+]\)</th>
<th scope="col" class="left">\(\top\)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\([-]\)</td>
<td class="left">\([-]\)</td>
<td class="left">\([-]\)</td>
<td class="left">\(\top\)</td>
<td class="left">\(\top\)</td>
</tr>

<tr>
<td class="left">\([0]\)</td>
<td class="left">\([-]\)</td>
<td class="left">\([0]\)</td>
<td class="left">\([+]\)</td>
<td class="left">\(\top\)</td>
</tr>

<tr>
<td class="left">\([+]\)</td>
<td class="left">\(\top\)</td>
<td class="left">\([+]\)</td>
<td class="left">\([+]\)</td>
<td class="left">\(\top\)</td>
</tr>

<tr>
<td class="left">\(\top\)</td>
<td class="left">\(\top\)</td>
<td class="left">\(\top\)</td>
<td class="left">\(\top\)</td>
<td class="left">\(\top\)</td>
</tr>
</tbody>
</table></li>
<li>Esto nos permite ahora razonar que \(z=x^2 + y^2\) nunca es negativo</li>
</ul>


</article>

</slide>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org15f0215" class="outline-2">
<h2 id="org15f0215">Observaciones Importantes</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>Además de la imprecisión debido a la "tosquedad" o lo "básico" de
\(D_\alpha\), las versiones abstractas de las operaciones
(que dependen de  \(D_\alpha\)) pueden introducir mas imprecisión</li>
<li>Así, la elección del <i>dominio abstracto</i> y la definición de las
<i>operaciones abstractas</i> son cruciales.</li>
</ul>


</article>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgfecd02b" class="outline-3">
<h3 id="orgfecd02b">Propiedades de la Interpretación Abstracta</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>Requeridas:
<ul>
<li>Exactitud - aproximaciones correctas: a causa de que las
propiedades mas "interesantes" son indecidibles el análisis
necesariamente tiene que ser aproximado. Queremos asegurarnos de
que el análisis es "conservador" y se equivoca en el "lado seguro"</li>
<li>Terminación - la compilación definitivamente debe terminar</li>
</ul></li>
<li>Deseable - "en la práctica"
<ul>
<li>Eficiencia: en la práctica, el tiempo de análisis finito no es
suficiente: finito y pequeño</li>
<li>Precisión - de la información recopilada: depende de la idoneidad
de el dominio abstracto y el nivel de detalle al que el
procedimiento de interpretación imita la semántica del lenguaje</li>
<li>Utilidad: determina qué información vale la pena recopilar</li>
</ul></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org2aec181" class="outline-3">
<h3 id="org2aec181">Aproximaciones Correctas</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>Idea básica en aproximación: para alguna propiedad \(p\) queremos mostrar
      \[\forall x, x \in S \Rightarrow p(x)\] 
Alternativa: construir un conjunto \(S_a \supseteq S\) y demostrar
     \[\forall x, x \in S_a \Rightarrow p(x)\] 
entonces, \(S_a\) es una aproximación segura de \(S\)</li>
<li>Aproximación de funciones: para alguna propiedad \(p\) queremos mostrar 
\[\forall x, x \in S \Rightarrow p(F(x))\]</li>
<li>Una función
\[G: S \rightarrow S\] es una aproximación segura de \(F\) si
\[\forall x, x \in S, p(G(x)) \Rightarrow p(F(x))\]</li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgb32027c" class="outline-3">
<h3 id="orgb32027c">Aproximación del significado de un programa</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>El significado de un programa \(P\) es un mapeo \(F_P\) de entrada a
salida, cuyos valores de  entrada y salida \(\in\) a un dominio
"estándar" \(D\): \[F_P: D \rightarrow D\]</li>
<li>"Elevemos" este significado para asignar <i>conjuntos</i> de entradas a
<i>conjuntos</i> de salidas \[F^*_P: \wp(D) \rightarrow \wp(D)\] donde \(\wp(S)\)
denota el conjunto potencia de S, y \[F_P^*(S) = \{F_P(x) \arrowvert x \in  S\}\]</li>
<li>Una función \[G: \wp(D) \rightarrow \wp(D)\] es una aproximación segura de
\(F_P^*\) si  \[\forall S, S \in \wp(D), G(S) \supseteq F_P^*(S)\]</li>
<li>Las propiedades se pueden demostrar usando \(G\) en lugar de \(F_P^*\)</li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgec2f882" class="outline-2">
<h2 id="orgec2f882">Aproximación del significado de un programa (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>Para alguna propiedad \(p\) queremos mostrar que para las
entradas - \(S, p(F_P^*(S))\)</li>
<li>mostramos que para las entradas \(S_a, p(G(S_a))\)</li>
<li>Dado que \(G(S_a) \supseteq F_P^*(S_a)\) para las entradas \(S_a, p(F_P^*(S_a))\)
(Nota: abuso de notación - \(F_P^*\) no funciona con valores abstractos \(S_a\))</li>
<li>Siempre que \(F_P^*\) sea monótono: \[S_a \supseteq S \Rightarrow F_P^*(S_a) \supseteq F_P^*(S)\]</li>
<li>Y como \(S_a \supseteq S\), entonces: para las entradas \(S, p(F_P^*(S))\)</li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgc50b12a" class="outline-2">
<h2 id="orgc50b12a">Dominio abstracto y función de concretización</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>El dominio \(\wp(D)\) se puede representar mediante un dominio
"abstracto" \(D_\alpha\) de representaciones finitas de (posiblemente) objetos infinitos en \(\wp(D)\)</li>
<li>La representación de \(\wp(D)\) por \(D_\alpha\) se expresa mediante una
función (monótona) llamada función de concretización: \[\gamma :
  D_\alpha → \wp(D)\] tal que \(\gamma(\lambda) = d\) si \(d\) es el
elemento más grande (bajo \(\supseteq\)) de \(\wp(D)\) que \(\lambda\)
describe [\((\wp(D), \supseteq)\) es obviamente una retículo completo]</li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgfac3454" class="outline-3">
<h3 id="orgfac3454">Ejemplo</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>En el ejemplo de los "signos", con \(D_\alpha =
  \{[-],[0],[+],\top \}\), \(\gamma\) viene dado por \[
  \begin{align}
     \gamma([-]) &= \{x \in Z \arrowvert x < 0  \} \\
     \gamma([0]) &= \{0\} \\
     \gamma([+]) &= \{x \in Z \arrowvert x > 0\} \\
     \gamma(\top) &= Z \\
     \end{align} \]</li>
<li>\(\gamma(?) = \emptyset \rightarrow\) definimos \(\bot \arrowvert \gamma(\bot) = \emptyset\)</li>
</ul>


</article>

</slide>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org49f780d" class="outline-2">
<h2 id="org49f780d">Función de abstracción</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<p>
También podemos definir (no estrictamente necesario) una función de
 abstracción (monótona) \[\alpha : \wp(D) \rightarrow D_\alpha\]
 \(\alpha(d) = \lambda\) si \(\lambda\) es el elemento "mínimo" de
 \(D_\alpha\) que describe \(d\) [bajo un orden adecuado definido en los
 elementos de \(D_\alpha\)] 
</p>

<p>
p.ej. en el ejemplo de los "signos", \[
  \begin{align}
       \alpha(\{1, 2, 3\}) &= [+] (no \top) \\
       \alpha(\{- 1, −2, −3\}) &= [-] (no \top) \\
       \alpha(\{0\}) &= [0] \\
       \alpha(\{- 1, 0, 1\}) &= \top \\
     \end{align} \]
  <img src="alphagamma2.png" alt="alphagamma2.png" />
</p>


</article>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org6097076" class="outline-3">
<h3 id="org6097076">Significado abstracto y seguridad</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li>Ahora podemos definir una función de significado abstracto como
\[F_\alpha : D_\alpha \rightarrow D_\alpha\] que es segura si
\[\forall \lambda, \lambda \in D_\alpha, \gamma(F_\alpha(\lambda))
   \supseteq F^*_P(\gamma(\lambda))\]
	   <img src="absmean2.png" alt="absmean2.png" /></li>
<li>Entonces podemos probar una propiedad de la salida de una clase
dada de entradas, probando que todos los
elementos de \(\gamma(F_\alpha(\lambda))\) tienen tal propiedad</li>
<li>P.ej. puede demostrarse, una propiedad como "si este programa toma
un número positivo producirá un número negativo como salida"</li>
</ul>


</article>

</slide>

</slide>



</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org7b4393a" class="outline-2">
<h2 id="org7b4393a">Demostrar propiedades en abstracto</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>Generando \(F_\alpha\):
<ul>
<li>\(F_P\) obtenido del programa y la semántica predefinida de
operadores \((x + z) ∗ 3\), \(F_P = (x + z) ∗ 3\)</li>
<li>Análisis automático: \(F_\alpha\) debería obtenerse del programa y
la semántica de operadores abstractos (propiedades compositivas)
\(\{odd, even, +_\alpha, ∗_\alpha\} \Rightarrow F_\alpha = (x +_\alpha z) ∗_\alpha odd\)</li>
</ul></li>
<li>"Si este programa toma un número positivo, producirá un número
negativo como salida"</li>
</ul>
<ul class="build">
<li>\(P = (y := x ∗ −3)\), entrada \(x\), salida \(y\)</li>
<li>\(F_P = x ∗ −3\)</li>
<li>\(F_\alpha = x ∗_\alpha [-]\)</li>
<li>\(F_\alpha([+]) = [+] ∗_\alpha [-] = [-]\)</li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org877c247" class="outline-2">
<h2 id="org877c247">Semánticas Colectoras</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>La semántica de "entrada-salida" es a menudo demasiado tosca para un
análisis útil: información sobre el "Estado" en los puntos de
programa generalmente requieren \(\to\) "semánticas extendidas"</li>
<li>Los puntos del programa se pueden alcanzar muchas veces, desde
diferentes puntos y en diferentes "Estados" \(\to\) "semanticas
colectoras" 
   \[\{x> 3\} y := x ∗ −3 \{y < −9 \} \mbox{ o } \{x < −3\} y := x ∗ −3 \{y > 9 \}\] 
   \[\{x = [+]\} y := x ∗ −3 \{y = [-]\} \mbox{ o } \{x = [-]\} y := x ∗ −3 \{y = [+]\}\]</li>
<li>El análisis a menudo calcula una colección de estados abstractos
para un punto de programa.  \[\{x = \{[+], [-]\}\} y := x ∗ −3 \{y = \{[-], [+]\}\}\]</li>
<li>A menudo, es más eficiente "resumir" estados en uno que ofrezca la
mejor descripción \(\to\)  estructura de retículo en un dominio abstracto \[\{x = \sqcup \{[+], [-]\}\} y := x ∗ −3 \{y = \sqcup \{[-], [+]\}\}\]</li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org88d6546" class="outline-3">
<h3 id="org88d6546">Estructura de Retículo</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>El ordenamiento en \(\wp(D), \subseteq\), induce un ordenamiento en
\(D_\alpha, \leq_\alpha\) ("se aproxima mejor") Por ejemplo, podemos
elegir \(\alpha(\{1, 2, 3\}) = [+] \mbox{ o } \alpha(\{1, 2, 3\}) =
   \top\), pero \(\gamma([+]) = \{x \in Z \arrowvert x > 0\} \mbox{ y }
   \gamma(\top) = Z\), y dado que \(\{x \in Z \arrowvert x > 0\}
   \subseteq Z\) tenemos  \([+] \leq_\alpha \top\), es decir, \([+]\) se
aproxima mejor que \(\top\), es mas preciso.</li>
<li>Generalmente se requiere que \((D_\alpha, \leq_\alpha)\) sea una retículo completo</li>
<li>Por lo tanto, para todo \(S \subseteq D_\alpha\) existe un único
mínimo límite superior \(\sqcup S \in D_\alpha\), es decir, tal que
<ul>
<li>\(\forall \lambda_S \in S, \lambda_S \leq_\alpha \sqcup S\)</li>
<li>\((\forall \lambda_S \in S, \lambda_S \leq_\alpha \lambda) \Rightarrow \sqcup S \leq_\alpha \lambda\)</li>
</ul></li>
<li>Intuición: dado un conjunto de aproximaciones del "estado actual" en
un punto dado en un programa, para asegurarse de que sea la mejor
descripción "general" para el punto:
<ul>
<li>\(\sqcup S\) se aproxima a <i>todos</i> los elementos de \(S\)</li>
<li>\(\sqcup S\) es la mejor aproximación en \(D_\alpha\)</li>
</ul></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org8c2bc95" class="outline-3">
<h3 id="org8c2bc95">Ejemplo: aritmética entera de signos</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>Consideramos \(D_\alpha = \{[-], [0], [+],\top\}\)</li>
</ul>
<ul class="build">
<li>Agregamos \(\bot\) (infimum) para que \(\alpha(\emptyset)\) exista y
para tener una retículo completo: \(D_\alpha = \{\bot, [-], [0],
     [+], \top\}\)</li>
<li>(Intuición: representa un punto del programa que nunca será alcanzado)</li>
<li>La función de concretización debe ampliarse con \[\gamma(\bot) =
     \emptyset\]</li>
<li>El reticulo es:
<img src="reticulo2.png" alt="reticulo2.png" /></li>
<li>\(\sqcup\{[+],[-]\} = \sqcup\{[-],[+]\} = \top\)</li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org8591ab9" class="outline-2">
<h2 id="org8591ab9">Ejemplo: aritmética entera de signos (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li>Para hacer \(t\) mas significativo, consideramos \(D_\alpha =
  \{\bot,[-],[0^-],[0],[0^+],[+],\top\}\)</li>
</ul>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="left">\(\gamma(\bot)\)</td>
<td class="left">\(=\)</td>
<td class="left">\(\emptyset\)</td>
<td class="left">\(\gamma(\top)\)</td>
<td class="left">\(=\)</td>
<td class="left">\(Z\)</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">\(\gamma([-])\)</td>
<td class="left">\(=\)</td>
<td class="left">\(\{x \in Z \arrowvert x < 0 \}\)</td>
<td class="left">\(\gamma([+])\)</td>
<td class="left">\(=\)</td>
<td class="left">\(\{x \in Z \arrowvert x > 0 \}\)</td>
<td class="left">\(\gamma([0]) = \{0\}\)</td>
</tr>

<tr>
<td class="left">\(\gamma([0^-])\)</td>
<td class="left">\(=\)</td>
<td class="left">\(\{x \in Z \arrowvert x \leq 0 \}\)</td>
<td class="left">\(\gamma([0^+])\)</td>
<td class="left">\(=\)</td>
<td class="left">\(\{x \in Z \arrowvert x \geq 0 \}\)</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
<ul>
<li>El reticulo es: <img src="reticext2.png" alt="reticext2.png" /></li>
<li>\(\sqcup\{[-],[0]\} = [0^-]\) representa con precisión un punto del programa donde una variable puede ser negativa o cero</li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgca867d1" class="outline-2">
<h2 id="orgca867d1">El enfoque de la inserción de Galois</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>A continuación, nos referiremos a \(\wp(D)\) simplemente como \(D\)</li>
<li>Las semánticas (colectoras) de los programas a menudo son dadas por
\(lfp(F)\) (el mínimo \(S\) tal que \(S = F(S)\), Siendo \(F\) la función
semántica dependiente del programa en \(D\))</li>
<li>Por lo tanto, necesitamos relacionar este punto fijo con (el de) la
función semántica aproximada \(F_\alpha\) (que se aproxima a \(F\) y
opera sobre los elementos de un dominio abstracto \(D_\alpha\))</li>
<li>Suponga: \(D\) y \(D_\alpha\) son retículos completos; \(\gamma :
  D_\alpha \rightarrow D\) y \(\alpha : D \rightarrow D_\alpha\) son
funciones monotónicas. La estructura \((D_\alpha, \gamma, D, \alpha)\)
se denomina <i>inserción de Galois</i> si:
<ul>
<li>\(\forall \lambda \in D_\alpha . \lambda = \alpha(\gamma(\lambda))\)</li>
<li>\(\forall d \in D . d \subseteq \gamma(\alpha(d))\)</li>
</ul></li>
</ul>


</article>
</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgef79895" class="outline-3">
<h3 id="orgef79895">La <i>Aproximación segura</i></h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>definida ahora en términos de una
inserción de Galois: Sea una inserción de Galois \((D_\alpha,
  \gamma,D, \alpha), \lambda \in D_\alpha\) aproxima en forma segura a
\(d \in D\)  ssi \(d \subseteq \gamma(\lambda)\)</li>
<li>Teorema fundamental [Cousot]: Dada una inserción de Galois
\((D_\alpha, \gamma, D, \alpha)\) y dos  funciones (monótonas) \(F: D
  \rightarrow D\) y \(F_\alpha: D_\alpha \rightarrow D_\alpha\) entonces
si \(F_\alpha\) es una aproximación de \(F\), \(lfp(F_\alpha)\) es una
aproximación de \(lfp(F)\)</li>
</ul>


</article>

</slide>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org274323b" class="outline-2">
<h2 id="org274323b">Terminación: condiciones en \(F_\alpha\) y \(D_\alpha\)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>La pregunta es si \(lfp(F_\alpha)\) es finitamente computable</li>
<li>El operador abstracto \(F_\alpha\) opera sobre los elementos de un
dominio abstracto \(D_\alpha\), que hemos requerido que sea un
retículo completo, y \(F_\alpha\) es monótona, por lo tanto
\[lfp(F_\alpha) = F_\alpha \uparrow n\] para algún \(n\) que nos
gustaría sea finito (es decir, nos gustaría que la secuencia de Kleene fuera finita)</li>
<li>Recordando las características de los puntos fijos en retículos, la
secuencia de Kleene será finito en casos que incluyen:
<ul>
<li>\(D_\alpha\) es finito</li>
<li>\(D_\alpha\) es cadena ascendente finita</li>
</ul></li>
</ul>


</article>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org4f2dc95" class="outline-3">
<h3 id="org4f2dc95">Estructura de Retículos</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="left">finito</td>
<td class="left">cadena finita ascendente</td>
</tr>

<tr>
<td class="left"><img src="finito2.png" alt="finito2.png" /></td>
<td class="left"><img src="chain2.png" alt="chain2.png" /></td>
</tr>

<tr>
<td class="left">finito en profundidad</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left"><img src="finitedepht2.png" alt="finitedepht2.png" /></td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>


</article>

</slide>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgec524df" class="outline-2">
<h2 id="orgec524df">Terminación: Discusión</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li>Demostrar la monotonicidad de \(F_\alpha\) puede ser más difícil que
mostrar que \(D_\alpha\) cumple con las condiciones de finitud</li>
<li>Puede haber un \(F_\alpha\) que termina incluso si no se cumplen las condiciones</li>
<li>Las condiciones también se relajan restringiendo la clase de
programas (por ejemplo, los programas no recursivos presentan pocas dificultades, aunque apenas son interesantes)</li>
<li>En algunos casos, una aproximación desde arriba (\(gfp(F_\alpha)\)) también puede ser interesante</li>
<li>Existen otras alternativas a la finitud: profundidad acotada
dinámica, etc. (Ver: widening y narrowing)</li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgbeb9505" class="outline-3">
<h3 id="orgbeb9505">Análisis de programas lógicos</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>¿Qué semántica?
<ul>
<li>Semántica declarativa: relacionada a qué es una consecuencia del programa
<ul>
<li>Semántica de la teoría de modelos mínimos</li>
<li>Semántica de punto fijo (basada en el operador \(T_P\))
(cf. estilo de base de datos, evaluación bottom-up )</li>
</ul></li>
<li>Semántica operativa: cercana al comportamiento del programa
<ul>
<li>Basado en resolución SLD (conjuntos éxitosos)</li>
<li>Denotacional</li>
<li>Puede cubrir posibilidades distintas a SLD: reactivo, paralelo, &#x2026;</li>
</ul></li>
</ul></li>
<li>Los análisis basados en semántica declarativa a menudo se denominan análisis <b>bottom up</b></li>
<li>Los análisis basados en la semántica operativa (de arriba hacia
abajo) a menudo se denominan Análisis <b>top down</b></li>
<li>Además, casos intermedios (generalmente logrados mediante la
transformación de programas)</li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgcd7ea47" class="outline-3">
<h3 id="orgcd7ea47">Caso de Estudio: Semántica de punto fijo</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>Dado el lenguaje de primer orden \(L\) asociado con un programa \(P\)
dado, el universo de Herbrand (\(U\)) es el conjunto de todos los
términos básicos de \(L\).</li>
<li>La Base de Herbrand (\(B\)) es el conjunto de todos los átomos
instanciados (<i>ground</i>) de \(L\).</li>
<li>Una <i>interpretación de Herbrand</i> es un subconjunto de \(B\). \(I\) es el
conjunto de todas las interpretaciones de Herbrand (\(\wp(B)\))</li>
<li>Un <i>modelo de Herbrand</i> es una interpretación de Herbrand que contiene
todos las consecuencias del programa.</li>
<li>El operador de consecuencia inmediata (\(T_P\)) es un mapeo \(T_P : I
   \rightarrow I\) definido por: \[T_P(M) = \{h \in B \vert \exists C
   \in ground(P), C = h \leftarrow b_1, \ldots, b_n \mbox{ y } b_1, \ldots,
   b_n \in M\}\] (en particular, si (\(a \leftarrow\)) &isin; \(P\), entonces \(ground(a) \subseteq T_P(M)\), para cada \(M\)).</li>
<li>\(T_P\) es monótono, por lo que tiene un minimo punto fijo \(lfp(T_P)\)
que se puede obtener como \(T_P \uparrow \omega\) comenzando desde el
elemento inferior del retículo (la interpretación vacía, \(\emptyset\)).</li>
<li>(Teorema de caracterización) [Van Emden y Kowalski]: El menor modelo de Herbrand \(P\), \(H\) es \(lfp(T_P)\)</li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgb1884f8" class="outline-3">
<h3 id="orgb1884f8">Semántica de punto fijo: Ejemplo</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<p>
\(P = \{ p(f(X)) \leftarrow p(X). \\
         p(a). q(a). q(b). \}\)
</p>
\begin{align}
U &= \{ a,b,f(a),f(b),f(f(a)),f(f(b)),\ldots \} \\

B &= \{ p(a),p(b),q(a),q(b),p(f(a)),p(f(b)),p(f(f(a))), \\ 
     p(f(f(b))), q(f(a))\ldots  \} \\

I &= \mbox{ todos los subconjuntos de } B \\

H &= \{ q(a), q(b), p(a), p(f(a)), p(f(f(a))), \ldots \} \\
\end{align}      
\begin{align}
T_P \uparrow 0 &= \{ p(a),q(a),q(b) \}\\

T_P \uparrow 1 &= \{ p(a),q(a),q(b),p(f(a)) \} \\

T_P \uparrow 2 &= \{ p(a),q(a),q(b),p(f(a)),p(f(f(a))) \} \\

\ldots \\

T_P \uparrow \omega &= H \\
\end{align}      


</article>

</slide>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgdc64d6b" class="outline-2">
<h2 id="orgdc64d6b">Interpretación abstracta "Bottom up"</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Encuentra una aproximación de \(H\) al aproximar \(lfp(T_P)\)</li>
<li>Aplicamos interpretación abstracta:
<ul>
<li>Dominio: \(I^\alpha\), tal que elementos de \(I^\alpha\) son
aproximaciones de elementos de \(I = \wp(B)\).</li>
<li>Función de concretización: \(\gamma: I^\alpha \rightarrow I\)</li>
<li>Función de abstracción: \(\alpha: I \rightarrow I^\alpha\)</li>
<li>Operador Abstracto: versión abstracta del operador \(T_P\)
\(T^\alpha_P : I^\alpha \rightarrow I^\alpha\)</li>
</ul></li>
</ul>


</article>
</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org7e717db" class="outline-3">
<h3 id="org7e717db">Interpretación abstracta "Bottom up" (cont.)</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Aplicamos interpretación abstracta:
<ul>
<li>Exactitud:
<ul>
<li>\((I^\alpha, \gamma, I, \alpha)\) debe ser una inserción de
Galois, es decir, \(I^\alpha\) retículo completo y debería
aproximar a \(I: \forall M \in I, \gamma(\alpha(M)) \supseteq M\)</li>
<li>\(T^\alpha_P\) aproximación segura de \(T_P\), es decir, \(\forall d,
      d \in  I^\alpha, \gamma(T^\alpha_P(d)) \supseteq T_P(\gamma(d))\)</li>
</ul></li>
<li>Terminación:
<ul>
<li>\(T^\alpha_P\) es monótono.</li>
<li>\(I^\alpha\) (al menos) cadena ascendente finita.</li>
</ul></li>
</ul></li>
<li>Entonces, \(H^\alpha = lfp(T^\alpha_P) = T^\alpha_P \uparrow n\) se
obtendrá en un número finito de pasos \(n\) y \(H^\alpha\) se aproximará a \(H\).</li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org90b624d" class="outline-3">
<h3 id="org90b624d">Interpretación abstracta "Bottom up" (cont.)</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">

<div class="figure">
<p><img src="bottomup2.png" alt="bottomup2.png" />
</p>
</div>


</article>

</slide>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org19a320f" class="outline-2">
<h2 id="org19a320f">Ejemplo: simple inferencia de "tipos"</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Problema de "inferencia de tipo" mínimal [Sondergaard]: Aproximación
de qué predicados están en \(H\)</li>
<li>\(pred(a):\) denota el símbolo de predicado de un átomo \(a\)</li>
<li>\(B^\alpha = S\) (conjunto de símbolos de predicado en un programa
\(P\)) Entonces \(I^\alpha = \wp(S)\), lo llamamos \(S^*\)</li>
<li>Función de concretización:
<ul>
<li>\(\gamma: S^* \rightarrow I\)</li>
<li>\(\gamma(D) = \{a \in B | pred(a) \in D \}\)</li>
</ul></li>
<li>Función de abstracción:
<ul>
<li>\(\alpha: I \rightarrow S^*\)</li>
<li>\(\alpha(M) = \{p \in S | \exists a \in M, pred(a) = p \}\)</li>
</ul></li>
<li>\((S^*, \gamma, I, \alpha)\) es una inserción de Galois.</li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org054600b" class="outline-3">
<h3 id="org054600b">Ejemplo: simple inferencia de "tipos" (cont.)</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Versión abstracta de \(T_P\) (después de alguna simplificación): \[T_P
  \alpha: S^* \rightarrow S^*\]</li>
</ul>

<p>
\(T^\alpha_P(D) = \{p \in S | \exists C \in P, 
                     C = h \rightarrow b_1, \ldots, b_n, \\
                     pred(h) \leftarrow pred(b_1), \ldots , pred(b_n)
                     \equiv p \leftarrow p_1,\ldots , p_n, \\
                     \mbox{ y } p_1,\ldots , p_n \in D\}\)
</p>
<ul>
<li>\(S^*\) finito (número finito de símbolos de predicado en el programa)
y \(T^\alpha_P\) monótona \(\to\) El análisis terminará en un número
finito de pasos \(n\) y \(H^\alpha = T^\alpha_P \uparrow n\) se aproxima a \(H\).</li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orge00cb31" class="outline-3">
<h3 id="orge00cb31">Ejemplo: simple inferencia de "tipos" (cont.)</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li>Ejemplo:</li>
</ul>

<p>
\[P = \{p(f(X)) \leftarrow p(X). 
    p(a). 
    r(X) ← t(X,Y). 
    q(a). 
    q(b). \}\]
</p>

<p>
\[P_\alpha = \{p \leftarrow p. 
    p. 
    r ← t. 
    q.\} \]
</p>

<ul>
<li>\(S = \{p/1, q/1, r/1, t/2\}\)</li>

<li>Abstracción: \(\alpha(\{p(a), p(b), q(a)\}) = \{p/1, q/1\}\)</li>

<li>Concretización:</li>
</ul>
\begin{align}
\gamma(\{p/1, q/1\}) &= \{A \in B | pred(A) = p/1 \vee pred(A) = q/1\} \\
&= \{p(a), p(b), p(f(a)), p(f(b)),\ldots, q(a), q(b), q(f(a)),\ldots \} \\
\end{align}

<ul>
<li>Análisis:</li>
</ul>
<p>
\(T^\alpha_P \uparrow 0 = T^\alpha_P(\emptyset) = {p / 1, q / 1}\) <br />
\(T^\alpha_P \uparrow 1 = T^\alpha_P(\{p/1, q/1\}) = \{p/1, q/1\} = T^\alpha_P \uparrow 0 = H^\alpha\)
</p>


</article>

</slide>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgd02a8da" class="outline-2">
<h2 id="orgd02a8da">Análisis <b>bottom up</b> basado en \(T_P\): Discusión</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Ventajas:
<ul>
<li>Simple y elegante. Basado en la semántica declarativa de punto fijo</li>
<li>General: resultados independientes de la consulta</li>
</ul></li>
<li>Desventajas:
<ul>
<li>Información solo sobre "salida del procedimiento". Normalmente se
necesita información en varios puntos del programa en la compilación, por ejemplo, "patrones de llamada"</li>
<li>La “variable lógica” no es observada (usa datos
instanciados). Información sobre estado de instanciación,
sustituciones, etc. a menudo necesarios en la compilación</li>
<li>No dirigido a consultas: analiza el programa completo, no la parte
(y los modos) que corresponden al uso "normal" (expresado a través
de una consulta)</li>
</ul></li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org0d8bfdb" class="outline-3">
<h3 id="org0d8bfdb">Análisis <b>Top down</b> (resumido)</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul class="build">
<li>Definir una semántica concreta extendida (recolectora), derivada de
la resolución SLD, haciendo observable la información relevante.</li>
<li>Dominio abstracto: generalmente "sustituciones abstractas".</li>
<li>Operaciones abstractas: unificación, composición, proyección, extensión, &#x2026;</li>
<li>Función semántica abstracta: toma una forma de consulta (abstracción
del objetivo inicial o conjunto de metas iniciales) y el programa y
devuelve descripciones abstractas de la sustituciones en puntos relevantes del programa.</li>
<li>Las variables complican las cosas:
<ul>
<li>corrección (debido al aliasing),</li>
<li>terminación (fusión de información relacionada con aliasing)</li>
</ul></li>
<li>Las variables lógicas son, de hecho, punteros (que se comportan
bien): 
X = tree(N,L,R),L = nill, Y = N, Y = 3, &#x2026;</li>

<li>esto hace que el análisis de programas lógicos sea muy interesante (y bastante relevante para otros paradigmas).</li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org9a62575" class="outline-3">
<h3 id="org9a62575">Arbol AND-OR abstracto</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li>Exploración del árbol <code>?- p.   h:- p1, ... pn.</code>
<img src="arbolandor2.png" alt="arbolandor2.png" /></li>
<li>Operacons Basicas:
<ul>
<li>Procedure entry: de \(\lambda_{call}\) obtiene \(\beta1_{entry}\)</li>
<li>Entry-to-exit (b): de \(\beta1_{entry}\) obtiene \(\beta1_{exit}\)</li>
<li>Clause entry: de \(\beta1_{entry}\) obtiene \(\lambda_1\)     (y clause exit)</li>
<li>Body traversal: de \(\lambda_1\) obtiene \(\lambda_{n+1}\)  (iterativamente aplicando (a))</li>
<li>Procedure exit: de (each or all of the) \(\beta{i}_{exit}\) obtiene \(\lambda_{success}\)</li>
</ul></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org9d10e89" class="outline-3">
<h3 id="org9d10e89">Optimización de Punto Fijo</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li>Punto fijo es requerido solo en los predicados recursivos:</li>
</ul>

<div class="figure">
<p><img src="arbolrec2.png" alt="arbolrec2.png" />
</p>
</div>
<ul>
<li>Recursivo simple (a)</li>
<li>Mutuamente Recursivos (b)
 "Usa la sustitución de exito actual e itera hasta que el punto fijo
es alcanzado"</li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org4bff6c6" class="outline-2">
<h2 id="org4bff6c6">Ciaopp</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Entrada 
<ul>
<li>Programas Lógicos</li>
<li>aserciones y extensiones sintácticas (opcionalmente)</li>
</ul></li>
<li>Salida
<ul>
<li>Mensajes de Errores</li>
<li>Programa Transformado con:
<ul>
<li>Resultados de analisis (como aserciones)</li>
<li>Resultados de chequeo estático de aserciones</li>
<li>Aserciones de chequeo en tiempo de ejecución</li>
<li>Optimizaciones (especialización, paralelización, etc).</li>
</ul></li>
</ul></li>
</ul>


</article>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org130ab57" class="outline-3">
<h3 id="org130ab57">Aserciones</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li>estado de las aserciones
<ul>
<li><code>check</code>  (default) &#x2013; Es la semántica intentada, para ser
chequeada, es la especificación del programa, ingresada por el usuario.</li>
<li><code>trust</code> &#x2013; semántica real, ingresada por el usuario y creída por
el compilador (es una guía).</li>
<li><code>true</code> o <code>false</code> &#x2013; semántica real, salida del compilador.</li>
<li><code>checked</code> &#x2013; validación: es un <code>check</code> que ha sido probado. (igual
a <code>true</code>).</li>
</ul></li>
<li><p>
ejemplo
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- trust pred is(X,Y) =&gt; (num(X),numexpr(Y)).

:- check pred p/2 : list(int) * var =&gt; list(int) * int.
:- modedef +X : nonvar(X).
:- check pred sortints(+L,-SL) :: list(int) * list(int) + sorted(SL)
			       # "@var{SL} has same elements as @var{L}.".</pre>

</div></li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org884418a" class="outline-2">
<h2 id="org884418a">Propiedades del estado de éxito</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li><p>
Propiedades del estado de <b>éxito</b>.  Son similiares en naturaleza a
las <i>postcondiciones</i> usadas en verificación de programas
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- success Goal =&gt; Postcond.</pre>

</div>
<p>
 debe ser interpretada como "para toda llamada de la forma <code>Goal</code> que
tiene éxito, al momento del éxito <code>Postcond</code> debería ser verdadero".
</p></li>

<li><p>
Restricción de las aserciones a un subconjunto de las llamadas
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- success Goal : Precond =&gt; Postcond.</pre>

</div>
<p>
 debe ser interpretada como "para toda llamada de la forma <code>Goal</code>
para la cual <code>Predcond</code> ocurre, si la llamada 
 tiene éxito, al momento del éxito <code>Postcond</code> debería ser verdadero".
</p></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org2befa10" class="outline-2">
<h2 id="org2befa10">Propiedades en la llamada y computación</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul class="build">
<li><p>
Propiedades en el estado de llamada de un predicado que pueden
aparecer en tiempo de ejecución. 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- calls Goal : Cond.</pre>

</div>
<p>
  se debe interpretar "toda llamada de la forma <code>Goal</code> debería
satisfacer <code>Cond</code>".
</p></li>
<li><p>
Propiedades de la computación
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- comp Goal : Precond  + Comp_prop.</pre>

</div>
<p>
  se debe interpretar "para toda llamada de la forma <code>Goal</code> para la
cual <code>Precond</code> ocurre, <code>Comp_prop</code> debería ocurrir también para la
computación de <code>Goal</code>".
</p></li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org7607ad0" class="outline-3">
<h3 id="org7607ad0">Composición de Aserciones</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<p>
Para facilitar la escritura una aserción compuesta de un predicado
puede ser usado como azúcar sintáctico para las aserciones básicas. La
aserción compuesta siguiente
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- pred Pred : Precond =&gt; Postcond + Comp_prop.</pre>

</div>
<p>
corresponde a la siguiente aserción de éxito:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- success Pred : Precond =&gt; Postcond.</pre>

</div>
<p>
si la aserción <code>pred</code> tiene un campo <code>=&gt;</code> (y un campo
<code>:</code>). También corresponde a una aserción de computación de la forma:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- comp Pred : Precond + Comp_prop.</pre>

</div>
<p>
si la aserción <code>pred</code> tiene los campos <code>+</code> y <code>:</code> 
</p>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orge8f3c44" class="outline-2">
<h2 id="orge8f3c44">Ejemplo de aserciones compuestas</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>Consideremos el programa clasico quicksort <code>qsort</code> . Podemos usar la</li>
</ul>
<p>
siguiente aserción para requerir que la salida del procedimiento
<code>qsort</code> sea una lista.
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- success qsort(A,B) =&gt; list(B).</pre>

</div>
<ul>
<li><p>
alternativamente podemos requerir que <code>qsort</code> es llamado con una
lista en su primer argumento y tiene exito, entonces el segundo
argumento también sera una lista.
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- success qsort(A,B) : list(A) =&gt; list(B).</pre>

</div></li>
</ul>

<p>
La diferencia reside en que se espera que <code>B</code> sea una lista en los casos en que <code>A</code> sea una lista. 
</p>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgfb7b3eb" class="outline-2">
<h2 id="orgfb7b3eb">Ejemplo de aserciones compuestas (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
Además podemos requerir que en todas las llamadas al predicado
<code>qsort</code> el primer argumento debe ser una lista:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- calls qsort(A,B) : list(A).</pre>

</div></li>

<li><p>
El procedimiento <code>qsort</code> debe ordenar cualquier lista. Asi,
requeriremos que todas las llamadas con una lista en el primer
argumento y una variable en el segundo no fallen:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- comp qsort(A,B) : (list(A) , var(B)) + does_not_fail.</pre>

</div></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org48f496a" class="outline-2">
<h2 id="org48f496a">Ejemplo de aserciones compuestas (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<p>
En lugar de todas estas aserciones se puede usar la compuesta:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- pred qsort(A,B) : (list(A) , var(B)) =&gt; list(B) + does_not_fail.</pre>

</div>

<p>
que es equivalente a: 
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- calls qsort(A,B) : (list(A), var(B)).
:- success qsort(A,B) : (list(A), var(B)) =&gt; list(B).
:- comp qsort(A,B) : (list(A) , var(B)) + does_not_fail.</pre>

</div>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org0cfc14d" class="outline-2">
<h2 id="org0cfc14d">Ejemplo de aserciones compuestas (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<p>
si queremos llamar a <code>qsort</code> con algo diferente a una variable en el
segundo argumento se debe agregar:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- pred qsort(A,B) : (list(A) , var(B)) =&gt; list(B) + does_not_fail.
:- pred qsort(A,B) : list(A) =&gt; list(B).</pre>

</div>


<p>
que es equivalente a: 
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- calls qsort(A,B) : ((list(A), var(B)) ; list(A)).
:- success qsort(A,B) : ((list(A), var(B)) ; list(A)). =&gt; list(B).
:- comp qsort(A,B) : (list(A) , var(B)) + does_not_fail.</pre>

</div>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org4588cc1" class="outline-2">
<h2 id="org4588cc1">Tipos Regulares</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<p>
Tipos Regulares son propiedades cuyas definiciones son  <i>"programas
regulares"</i>. Ejemplos:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- regtype tree(X) # "X is a tree.".

tree(nil).
tree(t(_,L,R)):- 
     tree(L),
     tree(R).

:- regtype intlist(X) # "X is a list of integers"

intlist([]).
intlist([X|R]) :- int(X), intlist(R).</pre>

</div>


</article>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgf9de3a2" class="outline-3">
<h3 id="orgf9de3a2">Lenguaje de aserciones</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
ejemplo de <code>pred/1</code> 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- pred length(L,N) : list * var =&gt; list * integer 
# "Computes the length of L.".
:- pred length(L,N) : var * integer =&gt; list * integer  
# "Outputs L of length N.".
:- pred length(L,N) : list * integer =&gt; list * integer
# "Checks that L is of length N.".</pre>

</div></li>
<li><p>
ejemplo de <code>pred/2</code>
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- check pred length(L,N) : list * var =&gt; list * integer.</pre>

</div></li>

<li><p>
ejemplo de <code>comp/1</code>
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- comp append(Xs,Ys,Zs) : var * var * var + not_fail.</pre>

</div></li>

<li><p>
<code>test</code> es similar a <code>success</code> pero especifica un caso de test como
parte de la especificación del predicado
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- test length(L,N) : ( L = [1,2,5,2] ) =&gt; ( N = 4 ).</pre>

</div></li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgc701158" class="outline-2">
<h2 id="orgc701158">Lenguaje de aserciones (cont.)</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li>definición de nuevos modos</li>
</ul>


<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- modedef +A : nonvar(A) # "A is bound upon predicate entry.".

:- pred p(+A,B) : integer(A) =&gt;  ground(B).</pre>

</div>

<p>
es equivalente a:
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- pred p(A,B) : (nonvar(A),integer(A)) =&gt;  ground(B)
			 # "A is bound upon predicate entry.".</pre>

</div>


<ul>
<li>documentación</li>
</ul>


<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- doc(Pred,Comment). 

:- doc(p(A,B),"A is bound upon predicate entry.").</pre>

</div>


</article>

</slide>



</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org3f7d041" class="outline-2">
<h2 id="org3f7d041">Ciaopp</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">

<div class="figure">
<p><img src="arquitectura.png" alt="arquitectura.png" width="900px" />
</p>
</div>


</article>

</slide>



</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgbccf61c" class="outline-2">
<h2 id="orgbccf61c">Analisis</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Entrada
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(app, [app/3], [assertions]).

:- entry app(A,B,C) : (list(A), list(B)).

app([],Y,Y).
app([X|Xs], Ys, [X|Zs]) :- app(Xs,Ys,Zs).</pre>

</div></li>
</ul>


<ul>
<li><p>
Salida 
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- true pred app(A,B,C) : ( list(A), list(B), term(C) )
			    =&gt; ( list(A), list(B), list(C) ).

:- true pred app(A,B,C) 
   : mshare([[A],[A,B],[A,B,C],[A,C],[B],[B,C],[C]])
   =&gt; mshare([[A,B,C],[A,C],[B,C]]).
</pre>

</div></li>
</ul>


</article>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgf286be3" class="outline-3">
<h3 id="orgf286be3">Analisis</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Entrada
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(qsort, [qsort/2], [assertions]).

:- entry qsort(A,B) : (list(num, A), var(B)).

qsort([X|L],R) :-
    partition(L,X,L1,L2),
    qsort(L2,R2), qsort(L1,R1),
    append(R2,[X|R1],R).
qsort([],[]).

partition([],_B,[],[]).
partition([E|R],C,[E|Left1],Right):-
    E &lt; C, !, partition(R,C,Left1,Right).
partition([E|R],C,Left,[E|Right1]):-
    E &gt;= C, partition(R,C,Left,Right1).

append([],X,X).
append([H|X],Y,[H|Z]):- append(X,Y,Z).</pre>

</div></li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orga04ab5e" class="outline-3">
<h3 id="orga04ab5e">Analisis</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
dominio shfr sin el ~:- entry &#x2026; ~ 
</p>

<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- true pred qsort(_A,R)
   : mshare([[_A],[_A,R],[R]])
   =&gt; mshare([[_A,R]]).

:- true pred partition(_A,_B,Left,Right)
   : ( mshare([[_A],[_A,_B],[_B],[Left],[Right]]), var(Left), var(Right) )
   =&gt; ( mshare([[_B]]), ground([_A,Left,Right]) ).

:- true pred append(_A,X,_B)
   : ( mshare([[X],[X,_B],[_B]]), ground([_A]) )
   =&gt; ( mshare([[X,_B]]), ground([_A]) ).</pre>

</div></li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org546d9ce" class="outline-3">
<h3 id="org546d9ce">Analisis</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
dominio shfr con el <code>:- entry qsort(A,B) : (list(num, A), var(B)).</code> 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- true pred qsort(A,B)
   : ( mshare([[B]]), var(B), ground([A]) )
   =&gt; ground([A,B]).

:- true pred partition(_A,_B,Left,Right)
   : ( mshare([[Left],[Right]]), var(Left), var(Right), ground([_A,_B]) )
   =&gt; ground([_A,_B,Left,Right]).

:- true pred append(_A,X,_B)
   : ( mshare([[_B]]), var(_B), ground([_A,X]) )
   =&gt; ground([_A,X,_B]).</pre>

</div></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgd476e9b" class="outline-3">
<h3 id="orgd476e9b">Analisis</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
dominio eterms sin  <code>:- entry qsort(A,B) : (list(num, A), var(B)).</code> 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- true pred qsort(_A,R)
   : ( term(_A), term(R) )
   =&gt; ( list(_A), list(R) ).

:- true pred partition(_A,_B,Left,Right)
   : ( term(_A), term(_B), term(Left), term(Right) )
   =&gt; ( list(arithexpression,_A), term(_B), 
	list(arithexpression,Left), list(arithexpression,Right) ).

:- true pred append(_A,X,_B)
   : ( list(_A), non_empty_list(X), term(_B) )
   =&gt; ( list(_A), non_empty_list(X), non_empty_list(_B) ).</pre>

</div></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org3c510f5" class="outline-3">
<h3 id="org3c510f5">Analisis</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
dominio eterms con  <code>:- entry qsort(A,B) : (list(num, A), var(B)).</code> 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- true pred qsort(A,B)
  : ( list(num,A), term(B) )
  =&gt; ( list(num,A), list(num,B) ).

:- true pred partition(_A,_B,Left,Right)
  : ( list(num,_A), num(_B), term(Left), term(Right) )
 =&gt; ( list(num,_A), num(_B), list(num,Left), list(num,Right) ).

:- true pred append(_A,X,_B)
 : ( list(num,_A), list1(num,X), term(_B) )
=&gt; ( list(num,_A), list1(num,X), list1(num,_B) ).</pre>

</div></li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org8233c21" class="outline-2">
<h2 id="org8233c21">Debugging</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Entrada
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(qsort, [qsort/2], [assertions]).

:- entry qsort(A,B) : (list(num, A), var(B)).

qsort([X|L],R) :-
    partition(L,X,L1,L2),
    qsort(L2,R2), qsort(L1,R1), 
    append(R2,[x|R1],R).    % &lt;-- 'x' should be X (variable)
qsort([],[]).

partition([],_B,[],[]).
partition([E|R],C,[E|Left1],Right):- 
    E &lt; C, !, partition(R,C,Left1,Right).
partition([E|R],C,Left,[E|Right1]):-
    E &gt;= C,   partition(R,C,Left,Right1).

append([],X,X).
append([H|X],Y,[H|Z]):- append(X,Y,Z).
</pre>

</div></li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org920b762" class="outline-3">
<h3 id="org920b762">Debugging</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
Salida
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- true pred qsort(A,B)
   : ( list(num,A), term(B) )
   =&gt; ( list(num,A), list(^(x),B) ).
</pre>

</div></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org3c00e5f" class="outline-3">
<h3 id="org3c00e5f">Debugging</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Entrada
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(_, [qsort/2], [assertions]).

:- entry qsort(A,B) : (list(num, A), var(B)).

qsort([X|L],R) :-
    partition(L,L1,X,L2),  % &lt;-- swapped second and third arguments
    qsort(L2,R2), qsort(L1,R1),
    append(R2,[X|R1],R).
qsort([],[]).

partition([],_B,[],[]).
partition([e|R],C,[E|Left1],Right):-  % &lt;-- 'e' should be E (variable)
    E &lt; C, !, partition(R,C,Left1,Right).
partition([E|R],C,Left,[E|Right1]):-
    E &gt;= C, partition(R,C,Left,Right1).

append([],X,X).
append([H|X],Y,[H|Z]):- append(X,Y,Z).</pre>

</div></li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org95497a5" class="outline-3">
<h3 id="org95497a5">Debugging</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Salida
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
{In /home/claudio/tmp/orgfiles/data/ciaopp/clase2/hacerslides/debugging/qsort2.pl
WARNING (preproc_errors): (lns 4-8) goal qsort2:partition(L,L1,X,L2) at literal 1 does not succeed!
}
{ERROR (ctchecks_messages): error printing:message_clause_incompatible(qsort2:partition/4/2,eterms
 ,qsort2:partition([e|C],A,[D|E],B),[A,B,C,D,E],[C,Right,R,E,Left1])
}
{In /home/claudio/tmp/orgfiles/data/ciaopp/clase2/hacerslides/debugging/qsort2.pl
WARNING (preproc_errors): (lns 14-15) goal arithmetic:&gt;=(E,C) at
literal 1 does not succeed!</pre>

</div></li>
</ul>


</article>

</slide>


</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgd35d771" class="outline-3">
<h3 id="orgd35d771">Debugging</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Chequear Aserciones
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(qsort3, [qsort/2], [assertions,regtypes,nativeprops]).

:- entry qsort(A,B) : (list(num, A), var(B)).

:- calls qsort(A,B) : list(num, A).                        % A1
:- success qsort(A,B)  =&gt; (ground(B), sorted_num_list(B)). % A2
:- calls partition(A,B,C,D) : (ground(A), ground(B)).      % A3
:- success partition(A,B,C,D) =&gt; (list(num, C),ground(D)). % A4
:- calls append(A,B,C) : (list(num,A),list(num,B)).        % A5

:- prop sorted_num_list/1.
sorted_num_list([]).
sorted_num_list([X]):- number(X).
sorted_num_list([X,Y|Z]):- 
    number(X), number(Y), X=&lt;Y, sorted_num_list([Y|Z]).

qsort([X|L],R) :-
    partition(L,X,L1,L2),
    qsort(L2,R2), qsort(L1,R1),
    append(R2,[x|R1],R).
qsort([],[]).

partition([],_B,[],[]).
partition([E|R],C,[E|Left1],Right):-
    E &lt; C, !, partition(R,C,Left1,Right).
partition([E|R],C,Left,[E|Right1]):-
    E &gt;= C, partition(R,C,Left,Right1).

append([],X,X).
append([H|X],Y,[H|Z]):- append(X,Y,Z).</pre>

</div></li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgb093d2e" class="outline-2">
<h2 id="orgb093d2e">Optimización</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
Entrada
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(_, [dup_first/2], []).

dup_first([X|Xs], Zs) :-
    app([X], [X|Xs], Zs).

app([],Y,Y).
app([X|Xs], Ys, [X|Zs]) :-
    app(Xs,Ys,Zs).</pre>

</div></li>

<li><p>
Salida 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(_1,[dup_first/2],[assertions]).

dup_first([A|B],[A,A|B]).
</pre>

</div></li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org29e637a" class="outline-3">
<h3 id="org29e637a">Optimización</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Entrada
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(append,[appe/3],[assertions] ) .


:- entry appe(A,B,C). 

appe(A,B,C) :- append([1,2,3|A],B,C).

append([],X,X).
append([H|X],Y, [H|Z]):- append(X,Y,Z) .</pre>

</div></li>

<li><p>
Salida 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(_1,[appe/3],[assertions]).

:- entry appe(A,B,C).

appe([],A,[1,2,3|A]).
appe([B|C],A,[1,2,3,B|D]) :-
    append_1(C,A,D).

append_1([],A,A).
append_1([B|C],A,[B|D]) :-
    append_1(C,A,D).</pre>

</div></li>
</ul>


</article>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org9aa31b9" class="outline-3">
<h3 id="org9aa31b9">Optimización</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Entrada
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(exponential_ac, [ent/2], [assertions]) .


:- entry ent(Base,_) : int(Base).

ent(Base,Res) :- exp(Base,3,Res).

exp(Base,Exp,Res):-
     exp_ac(Exp,Base,1,Res).

exp_ac(0,_,Res,Res).

exp_ac(Exp,Base,Tmp,Res) :-
    Exp &gt; 0,
    Expl is Exp - 1,
    NTmp is Tmp * Base,
    exp_ac(Expl,Base,NTmp,Res).</pre>

</div></li>
</ul>


</article>

</slide>
</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org6b93f28" class="outline-3">
<h3 id="org6b93f28">Optimizacion</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
Salida 
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(_1,[ent/2],[assertions]).

:- entry ent(Base,_A)
   : int(Base).

ent(A,B) :-
    C is A,
    D is C*A,
    E is D*A,
    exp_ac_1(A,E,B).

exp_ac_1(_1,A,A).
</pre>

</div></li>
</ul>


</article>

</slide>

</slide>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-orgcfd7922" class="outline-2">
<h2 id="orgcfd7922">Certificación</h2>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="smaller" id="text-">
<ul>
<li><p>
Entrada
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- module(multiply,_,[assertions]).

:- entry mmultiply(X,Y,Z): (var(Z),list(X,list(num)),list(Y,list(num))).
:- entry mmultiply(X,Y,Z) : (var(Z),ground(X),ground(Y)). 


mmultiply([],_,[]).
mmultiply([VO|Rest],V1,[Result|Others]):-
    mmultiply(Rest,V1,Others),
    multiply(V1,VO,Result).

multiply([],_,[]).
multiply([VO|Rest],VI,[Result|Others]):-
    multiply(Rest,VI,Others),
    vmul(VO,VI,Result).

vmul([],[],0).
vmul([H1|T1],[H2|T2],Result):-
    vmul(T1,T2,Newresult),
    Product is H1*H2,
    Result is Product+Newresult.</pre>

</div></li>
</ul>


</article>

</slide>
<slide id="sec-" class=" dark white nobackground" >
<hgroup class="">
       <h2 class=" "><div id="outline-container-org8d87d9f" class="outline-3">
<h3 id="org8d87d9f">Certificación</h3>
</div>
</h2>
       <h3></h3>
       </hgroup>
<article class="" id="text-">
<ul>
<li><p>
Certificado
</p>
<div class="org-src-container">

<pre class="prettyprint" data-lang="prolog">
:- true pred A is B+C : (mshare([[A]]),var(A),ground([B,C]))
			  =&gt; (ground([A,B,C])).
:- true pred A is B*C : (mshare([[A]]),var(A),ground([B,C]))
			 =&gt; (ground([A,B,C])).

:- true pred A is B+C : (term(A),num(B),num(C))
			 =&gt; (num(A),num(B),num(C)).

:- true pred A is B*C : (term(A),num(B),num(C))
			 =&gt; (num(A),num(B),num(C)).</pre>

</div></li>
</ul>


</article>

</slide>

</slide>
<slide class="backdrop"></slide>
</slides> 
<!--[if IE]>
  <script src="http://ajax.googleapis.com/ajax/libs/chrome-frame/1/CFInstall.min.js"></script>
  <script>CFInstall.check({mode: 'overlay'});</script>
<![endif]-->
</body> 

</html>
