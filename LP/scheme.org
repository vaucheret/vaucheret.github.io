#+TITLE: Lenguajes Declarativos 
#+DATE:  Claudio Vaucheret
#+AUTHOR: Scheme
#+EMAIL: cv@fi.uncoma.edu.ar


#+REVEAL_INIT_OPTIONS:  transition:'slide' 
#+options: toc:t num:nil

#+REVEAL_THEME: sky
#+REVEAL_HLEVEL: 2
#+reveal_root:  https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_EXTRA_CSS: grids.css


* Lenguaje Scheme
  
** Lenguajes Funcionales
   #+ATTR_REVEAL: :frag (roll-in)
   * Cálculo Lambda
     #+ATTR_HTML: :height 150 :float wrap
     [[file:Alonzo_Church.jpg]]
      Alonzo Church
   * Lisp
     #+ATTR_HTML: :height 150 :title John McCarthy :float wrap
     [[file:John_McCarthy_Stanford.jpg]]
      John McCarthy
     #+REVEAL: split

   Scheme
     #+ATTR_HTML: :height 150 :title John McCarthy :float wrap
     [[file:Guy_Steele.jpg]]
     Guy L. Steele, Jr. y
      #+ATTR_HTML: :height 150 :title John McCarthy :float wrap
     [[file:Jerry_Sussman.jpg]]
      Gerald Sussman

** Calculo Lambda

   - Abstracción: Dar a algo un /nombre/.
   - Referencia: Mencionar algo por su nombre.
   - Sintesis: combinar dos cosas para hacer una mas compleja.

     
* Sintaxis

** Numeros y símbolos
   #+REVEAL_HTML: <div style="font-size: 70%;">
   #+ATTR_REVEAL: :frag (roll-in)
   - Los siguientes caracteres tienen un significado especial y no pueden aparecer en simbolos
     #+BEGIN_SRC scheme
()[]{};."''#\
 #+END_SRC
   - y los siguientes son usados en números y no pueden aparecer como primer caracter de un símbolo
      #+BEGIN_SRC scheme
+ - .
 #+END_SRC
   - Ejemplos de simbolos en Scheme son:
      #+BEGIN_SRC scheme
abed r cdr p2q4 bugs? one-two *now&
 #+END_SRC
   - Los números no se consideran símbolos y son una categoría separada
     #+BEGIN_SRC scheme
     10, -763, 31.5
     #+END_SRC
 #+REVEAL_HTML: </div>             

** Scheme REPL 

   - Read-Eval-Print Loop 
     top level de scheme.
   
   #+BEGIN_SRC scheme 
	  ; 
	  ; Welcome to Racket v7.9 [bc].
	  ; 
	  > 7
	  7
	  > 
          > ten
          ; ten: undefined;
          ;   cannot reference an identifier before its definition
          ;   in module: top-level
          > 
   #+END_SRC

** Scheme REPL 
#+BEGIN_CENTER
(define /var/ /expr/)
#+END_CENTER
   #+BEGIN_SRC scheme 
> (define ten 10)
> ten
10
> 
   #+END_SRC
#+BEGIN_CENTER
(quote /symbol/)
#+END_CENTER
   #+BEGIN_SRC scheme 
> (quote ten)
'ten
> 
   #+END_SRC

** Aritmetica

   #+BEGIN_SRC scheme 
> (+ 4 7)
11
> '(+ 4 7)
'(+ 4 7)
>
> (* 3 (- 12 5))
21
> (+ 2 (/ 30 15))
4
> 
   #+END_SRC

** Listas

- [[color:red][LIS]]t [[color:red][P]]rocessing

   #+BEGIN_SRC scheme 
> (cons 1 '())
'(1)
> (define ls1 (cons 1 '()))
> ls1
'(1)
> (cons 2 ls1)
'(2 1)
> (cons 'a (cons 'b (cons 'c '())))
'(a b c)
> 
   #+END_SRC

** Listas

- IBM 704 "[[color:red][C]]ontents of [[color:red][A]]ddress [[color:red][R]]egister" "[[color:red][C]]ontents of [[color:red][D]]ecrement [[color:red][R]]egister" 

#+BEGIN_SRC scheme 
> (car '(1 2 3 4))
1
> (car '((1 2) 3 (4 5)))
'(1 2)
> (car '(ab (cd ef) gh))
'ab
> (cdr '(1 2 4))
'(2 4)
> (car (cdr '(a b c d)))
'b
> (cadr '(a b c d))
'b
> 
#+END_SRC

* Procedimientos y Recursión

** Expresión Lambda 
   #+REVEAL_HTML: <div style="font-size: 90%;">
- (λ (/parameters/) /body/)
- (lambda (/parameters/) /body/)

#+BEGIN_SRC scheme 
> (cons 19 '())
'(19)
> (cons 'bit '())
'(bit)
> ((λ (item) (cons item '())) 19)
'(19)
> ((lambda (item) (cons item '())) 'bit)
'(bit)
> ((lambda (item) (cons item '())) (* 5 6))
'(30)
> (define make-singleton (lambda (item) (cons item '())))
> (make-singleton 19)
'(19)
> (make-singleton 'bit)
'(bit)
> (define (make-singleton item) (cons item '()))
#+END_SRC
 #+REVEAL_HTML: </div>             

** Procedimientos

#+BEGIN_SRC scheme 
	 (define make-singleton
	   (lambda (item)
	     (cons item '())
	     )
	   )

	(define (make-singleton item)
	 (cons item '())
	 )
#+END_SRC

** Condicional

#+BEGIN_SRC scheme 
	    (define car-if-pair
	      (lambda (item)
		(cond
		 ((pair? item) (car item))
		 (else item))
		)
	      )

	  (define singleton-list?
	     (lambda (ls)
	       (and (pair? ls) (null? (cdr ls)))
	       )
	     )
#+END_SRC

** fibonacci

#+BEGIN_SRC scheme 
(define fib
  (λ (n)
    (cond
      ((= n 0) 1)
      ((= n 1) 1)
      (else (+ (fib (- n 1)) (fib (- n 2))))
      )
    )
  )

(define (fib1 n)
  (cond
    ((= n 0) 1)
    ((= n 1) 1)
    (else (+ (fib (- n 1)) (fib (- n 2))))
    )
  )
#+END_SRC

** fibonacci

#+BEGIN_SRC scheme 
(define (fibi n)
  (define (fibaux m a1 a2)
    (cond
      ((= n m) (+ a1 a2))
      (else (fibaux (+ m 1) a2 (+ a1 a2)))
      )
    )
  (cond
    ((= n 0) 1)
    ((= n 1) 1)
    (else (fibaux 2 1 1))
    )
    )

(define (fibb n)
  (cond
    ((= n 0) 1)
    ((= n 1) 1)
    (else (let fibaux ((m 2) (a1 1) (a2 1))
       (cond
      ((= n m) (+ a1 a2))
      (else (fibaux (+ m 1) a2 (+ a1 a2)))
      )     
       )
          )
    )
  )
#+END_SRC
