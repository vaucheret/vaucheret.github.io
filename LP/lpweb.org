#+TITLE: programación web con Programación Lógica
#+DATE: <2017-05-11 jue>
#+AUTHOR: Claudio Vaucheret
#+EMAIL: cv@fi.uncoma.edu.ar


#+REVEAL_INIT_OPTIONS:  transition:'cube' 
#+options: toc:nil num:nil

#+REVEAL_THEME: moon
#+REVEAL_HLEVEL: 3
#+reveal_root:  https://cdn.jsdelivr.net/npm/reveal.js




* ¿LP puede ser una alternativa atractiva para Web Programming?

** Modelo LAMP Clasico

#+ATTR_REVEAL: :frag (roll-in)
 * Linux (el Sistema Operativo)

 * Apache (Web Server)

 * MySQL (Base de Datos)
 
 * PHP (Lenguaje de scripting)



** Alternativas

#+ATTR_REVEAL: :frag (roll-in)
 * Tomcat 
   
    [[http://tomcat.apache.org/][Apache Tomcat® - Welcome!]] 

 * Python / django

    [[https://www.djangoproject.com/][The Web framework Django]]

 * Ruby / Ruby on Rails
  
    [[http://rubyonrails.org/][Ruby on Rails]]

 * MEAN / MongoDB, Express.js, Angular JS, Node.js

    [[http://mean.io/#!/][powered fullstack web framework]]


** LP comparte con otras alternativas
#+ATTR_REVEAL: :frag (roll-in)
 * Administración Dinámica de Memoria
 * Fortaleza Compilación a bytecode independiente de la arquitectura
 * Estructura bien establecida y manipulación de punteros


** LP tiene como ventajas
#+ATTR_REVEAL: :frag (roll-in)
 * Poderosa capacidad de procesamiento simbólico
 * Base de Datos Dinámica
 * Facilidades de Búsqueda
 * Gramáticas / DCG
 * Meta Programación / Higher Order
 * Agentes
 * Semántica bien definida
 * native Web Semantic


* Pillow / Ciao Prolog

** Escribiendo Cgi-scripts

[[file:cgiinterface.png]]

** Escribiendo Cgi-scripts

1. La dirección de la aplicación CGI es seleccionada en el Navegador. Es
   un URL estandard. El Navegador lo envía a al servidor HTTP correspondiente.
2. El ejecutable (en el directorio cgi bin) es iniciado por el
   servidor HTTP.
3. La salida del ejecutable ( que debe estar en formato HTML o MIME)
   es tomado por el Servidor HTTP,
4. y pasado al Navegador, que lo muestra.

El Código mas simple podría ser:
#+BEGIN_SRC prolog
main(_) :-
	write('Content-type: text/html'), nl,nl,
	write('<HTML>'),
	write('Hello world.'),
	write('</HTML>').
#+END_SRC


** Documentos estructurados HTML como términos Herbrand

- ~output_html(HTMLTerm)~ 

     Outputs 'HTMLTerm', interpreted as an 'html_term/1', to current
     output stream.

     (True) Usage:

          'HTMLTerm' is a term representing HTML code.
          (pillow_types:html_term/1)


- ~html2terms(String,Terms)~  

     'String' is a character list containing HTML code and 'Terms' is
     its prolog structured representation.

     Reversible

#+BEGIN_SRC prolog
:- use_package(library(pillow)).
	
main(_) :-
	T = [ cgi_reply,
	html( [
		  'Hello',
		  b(world)
	      ]),
	output_html(T).
#+END_SRC

** Produciendo Formularios 

[[file:forminterface.png]]

** Produciendo Formularios

#+BEGIN_SRC prolog
:- use_package(library(pillow)).
:- use_module(library(write)).

main(_):-
	output_html([
	        cgi_reply,
		start,
		title('Telephone database'),
		heading(2,'Telephone database'),
		$,
		start_form('http://localhost/~claudio/cgi-bin/phonedb3.pl'),
		'Click here, enter name of clip member, and press Return:',
		\\,
		input(text,[name=person_name,size=20]),
		end_form,
		end]).

#+END_SRC

** Escribiendo Controladores de Formularios

** Modulos Activos

[[file:forminterfaceactivemod.png]] 

** Descarga de Código automático

[[file:automcodedownlarq.png]] 

** Acceso a código publicado en HTTP

* Preguntas?
